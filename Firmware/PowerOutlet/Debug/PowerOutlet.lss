
PowerOutlet.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00002216  000022aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002216  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800106  00800106  000022b0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022b0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000370  00000000  00000000  0000230c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007001  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001232  00000000  00000000  0000967d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001146  00000000  00000000  0000a8af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b90  00000000  00000000  0000b9f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000136a  00000000  00000000  0000c588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003822  00000000  00000000  0000d8f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000318  00000000  00000000  00011114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 03 01 	jmp	0x206	; 0x206 <__dtors_end>
       4:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
       8:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
       c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      10:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      14:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      18:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      1c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      20:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      24:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      28:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      2c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      30:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      34:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      38:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      3c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      40:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__vector_16>
      44:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      48:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      4c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      50:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      54:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      58:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      5c:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      60:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>
      64:	0c 94 2b 01 	jmp	0x256	; 0x256 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	50 41       	sbci	r21, 0x10	; 16
      6a:	20 50       	subi	r18, 0x00	; 0
      6c:	6f 77       	andi	r22, 0x7F	; 127
      6e:	65 72       	andi	r22, 0x25	; 37
      70:	09 20       	and	r0, r9
      72:	3d 20       	and	r3, r13
      74:	25 53       	subi	r18, 0x35	; 53
      76:	0d 0a       	sbc	r0, r29
	...

00000079 <_ZZN4RF2412printDetailsEvE3__c_11>:
      79:	43 52 43 20 4c 65 6e 67 74 68 09 20 3d 20 25 53     CRC Length. = %S
      89:	0d 0a 00                                            ...

0000008c <_ZZN4RF2412printDetailsEvE3__c_10>:
      8c:	4d 6f 64 65 6c 09 09 20 3d 20 25 53 0d 0a 00        Model.. = %S...

0000009b <_ZZN4RF2412printDetailsEvE3__c_9>:
      9b:	44 61 74 61 20 52 61 74 65 09 20 3d 20 25 53 0d     Data Rate. = %S.
      ab:	0a 00                                               ..

000000ad <_ZZN4RF2412printDetailsEvE3__c_8>:
      ad:	44 59 4e 50 44 2f 46 45 41 54 55 52 45 00           DYNPD/FEATURE.

000000bb <_ZZN4RF2412printDetailsEvE3__c_7>:
      bb:	43 4f 4e 46 49 47 00                                CONFIG.

000000c2 <_ZZN4RF2412printDetailsEvE3__c_6>:
      c2:	52 46 5f 53 45 54 55 50 00                          RF_SETUP.

000000cb <_ZZN4RF2412printDetailsEvE3__c_5>:
      cb:	52 46 5f 43 48 00                                   RF_CH.

000000d1 <_ZZN4RF2412printDetailsEvE3__c_4>:
      d1:	45 4e 5f 52 58 41 44 44 52 00                       EN_RXADDR.

000000db <_ZZN4RF2412printDetailsEvE3__c_3>:
      db:	45 4e 5f 41 41 00                                   EN_AA.

000000e1 <_ZZN4RF2412printDetailsEvE3__c_2>:
      e1:	52 58 5f 50 57 5f 50 30 2d 36 00                    RX_PW_P0-6.

000000ec <_ZZN4RF2412printDetailsEvE3__c_1>:
      ec:	54 58 5f 41 44 44 52 00                             TX_ADDR.

000000f4 <_ZZN4RF2412printDetailsEvE3__c_0>:
      f4:	52 58 5f 41 44 44 52 5f 50 32 2d 35 00              RX_ADDR_P2-5.

00000101 <_ZZN4RF2412printDetailsEvE3__c>:
     101:	52 58 5f 41 44 44 52 5f 50 30 2d 31 00              RX_ADDR_P0-1.

0000010e <_ZZN4RF2422print_address_registerEPKchhE3__c_2>:
     10e:	0d 0a 00                                            ...

00000111 <_ZZN4RF2422print_address_registerEPKchhE3__c_1>:
     111:	25 30 32 78 00                                      %02x.

00000116 <_ZZN4RF2422print_address_registerEPKchhE3__c_0>:
     116:	20 30 78 00                                          0x.

0000011a <_ZZN4RF2422print_address_registerEPKchhE3__c>:
     11a:	25 53 09 25 63 20 3d 00                             %S.%c =.

00000122 <_ZZN4RF2419print_byte_registerEPKchhE3__c_1>:
     122:	0d 0a 00                                            ...

00000125 <_ZZN4RF2419print_byte_registerEPKchhE3__c_0>:
     125:	20 30 78 25 30 32 78 00                              0x%02x.

0000012d <_ZZN4RF2419print_byte_registerEPKchhE3__c>:
     12d:	25 53 09 25 63 20 3d 00                             %S.%c =.

00000135 <_ZZN4RF2412print_statusEhE3__c>:
     135:	53 54 41 54 55 53 09 09 20 3d 20 30 78 25 30 32     STATUS.. = 0x%02
     145:	78 20 52 58 5f 44 52 3d 25 78 20 54 58 5f 44 53     x RX_DR=%x TX_DS
     155:	3d 25 78 20 4d 41 58 5f 52 54 3d 25 78 20 52 58     =%x MAX_RT=%x RX
     165:	5f 50 5f 4e 4f 3d 25 78 20 54 58 5f 46 55 4c 4c     _P_NO=%x TX_FULL
     175:	3d 25 78 0d 0a 00                                   =%x...

0000017b <_ZL17child_pipe_enable>:
     17b:	00 01 02 03 04 05                                   ......

00000181 <_ZL18child_payload_size>:
     181:	11 12 13 14 15 16                                   ......

00000187 <_ZL10child_pipe>:
     187:	0a 0b 0c 0d 0e 0f                                   ......

0000018d <_ZL19rf24_pa_dbm_e_str_P>:
     18d:	ab 01 a4 01 9d 01 95 01                             ........

00000195 <_ZL19rf24_pa_dbm_e_str_3>:
     195:	50 41 5f 48 49 47 48 00                             PA_HIGH.

0000019d <_ZL19rf24_pa_dbm_e_str_2>:
     19d:	4c 41 5f 4d 45 44 00                                LA_MED.

000001a4 <_ZL19rf24_pa_dbm_e_str_1>:
     1a4:	50 41 5f 4c 4f 57 00                                PA_LOW.

000001ab <_ZL19rf24_pa_dbm_e_str_0>:
     1ab:	50 41 5f 4d 49 4e 00                                PA_MIN.

000001b2 <_ZL22rf24_crclength_e_str_P>:
     1b2:	c7 01 c0 01 b8 01                                   ......

000001b8 <_ZL22rf24_crclength_e_str_2>:
     1b8:	31 36 20 62 69 74 73 00                             16 bits.

000001c0 <_ZL22rf24_crclength_e_str_1>:
     1c0:	38 20 62 69 74 73 00                                8 bits.

000001c7 <_ZL22rf24_crclength_e_str_0>:
     1c7:	44 69 73 61 62 6c 65 64 00                          Disabled.

000001d0 <_ZL18rf24_model_e_str_P>:
     1d0:	de 01 d4 01                                         ....

000001d4 <_ZL18rf24_model_e_str_1>:
     1d4:	6e 52 46 32 34 4c 30 31 2b 00                       nRF24L01+.

000001de <_ZL18rf24_model_e_str_0>:
     1de:	6e 52 46 32 34 4c 30 31 00                          nRF24L01.

000001e7 <_ZL21rf24_datarate_e_str_P>:
     1e7:	fb 01 f5 01 ed 01                                   ......

000001ed <_ZL21rf24_datarate_e_str_2>:
     1ed:	32 35 30 4b 42 50 53 00                             250KBPS.

000001f5 <_ZL21rf24_datarate_e_str_1>:
     1f5:	32 4d 42 50 53 00                                   2MBPS.

000001fb <_ZL21rf24_datarate_e_str_0>:
     1fb:	31 4d 42 50 53 00 00                                1MBPS..

00000202 <__ctors_start>:
     202:	68 0c       	add	r6, r8

00000204 <__ctors_end>:
     204:	74 0c       	add	r7, r4

00000206 <__dtors_end>:
     206:	11 24       	eor	r1, r1
     208:	1f be       	out	0x3f, r1	; 63
     20a:	cf ef       	ldi	r28, 0xFF	; 255
     20c:	d8 e0       	ldi	r29, 0x08	; 8
     20e:	de bf       	out	0x3e, r29	; 62
     210:	cd bf       	out	0x3d, r28	; 61

00000212 <__do_clear_bss>:
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	a6 e0       	ldi	r26, 0x06	; 6
     216:	b1 e0       	ldi	r27, 0x01	; 1
     218:	01 c0       	rjmp	.+2      	; 0x21c <.do_clear_bss_start>

0000021a <.do_clear_bss_loop>:
     21a:	1d 92       	st	X+, r1

0000021c <.do_clear_bss_start>:
     21c:	a8 39       	cpi	r26, 0x98	; 152
     21e:	b2 07       	cpc	r27, r18
     220:	e1 f7       	brne	.-8      	; 0x21a <.do_clear_bss_loop>

00000222 <__do_copy_data>:
     222:	11 e0       	ldi	r17, 0x01	; 1
     224:	a0 e0       	ldi	r26, 0x00	; 0
     226:	b1 e0       	ldi	r27, 0x01	; 1
     228:	e6 e1       	ldi	r30, 0x16	; 22
     22a:	f2 e2       	ldi	r31, 0x22	; 34
     22c:	02 c0       	rjmp	.+4      	; 0x232 <__do_copy_data+0x10>
     22e:	05 90       	lpm	r0, Z+
     230:	0d 92       	st	X+, r0
     232:	a6 30       	cpi	r26, 0x06	; 6
     234:	b1 07       	cpc	r27, r17
     236:	d9 f7       	brne	.-10     	; 0x22e <__do_copy_data+0xc>

00000238 <__do_global_ctors>:
     238:	12 e0       	ldi	r17, 0x02	; 2
     23a:	c4 e0       	ldi	r28, 0x04	; 4
     23c:	d2 e0       	ldi	r29, 0x02	; 2
     23e:	04 c0       	rjmp	.+8      	; 0x248 <__do_global_ctors+0x10>
     240:	22 97       	sbiw	r28, 0x02	; 2
     242:	fe 01       	movw	r30, r28
     244:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__tablejump__>
     248:	c2 30       	cpi	r28, 0x02	; 2
     24a:	d1 07       	cpc	r29, r17
     24c:	c9 f7       	brne	.-14     	; 0x240 <__do_global_ctors+0x8>
     24e:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <main>
     252:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <__do_global_dtors>

00000256 <__bad_interrupt>:
     256:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025a <_ZN6MQTTSNC1ER9SensorNeth>:


#include "MQTTSN.h"

// default constructor
MQTTSN::MQTTSN(SensorNet& snetwork, uint8_t clientId)
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	ec 01       	movw	r28, r24
     266:	8b 01       	movw	r16, r22
     268:	f4 2e       	mov	r15, r20
     26a:	03 96       	adiw	r24, 0x03	; 3
     26c:	0e 94 47 04 	call	0x88e	; 0x88e <_ZN12MQTTSNPacketC1Ev>
{
	this->clientId = clientId;
     270:	fa 82       	std	Y+2, r15	; 0x02
	this->network = &snetwork;
     272:	19 83       	std	Y+1, r17	; 0x01
     274:	08 83       	st	Y, r16
	this->currentState = STATE_DISCONNECTED;
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	8e ab       	std	Y+54, r24	; 0x36
} //MQTTSN
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	08 95       	ret

00000286 <_ZN6MQTTSND1Ev>:

// default destructor
MQTTSN::~MQTTSN()
     286:	03 96       	adiw	r24, 0x03	; 3
     288:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <_ZN12MQTTSNPacketD1Ev>
     28c:	08 95       	ret

0000028e <_ZN6MQTTSN4tickEv>:
		this->lastTransmission = Timing::millis();
}

void MQTTSN::tick()
{
	network->tick();
     28e:	fc 01       	movw	r30, r24
     290:	80 81       	ld	r24, Z
     292:	91 81       	ldd	r25, Z+1	; 0x01
     294:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN9SensorNet4tickEv>
     298:	08 95       	ret

0000029a <_ZN6MQTTSN7connectEv>:
}
void MQTTSN::connect()
{
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	cd b7       	in	r28, 0x3d	; 61
     2a8:	de b7       	in	r29, 0x3e	; 62
     2aa:	64 97       	sbiw	r28, 0x14	; 20
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	8c 01       	movw	r16, r24
	packet.sanitise();
     2b8:	7c 01       	movw	r14, r24
     2ba:	83 e0       	ldi	r24, 0x03	; 3
     2bc:	e8 0e       	add	r14, r24
     2be:	f1 1c       	adc	r15, r1
     2c0:	c7 01       	movw	r24, r14
     2c2:	0e 94 11 04 	call	0x822	; 0x822 <_ZN12MQTTSNPacket8sanitiseEv>
		packet.msgType = CONNECT;
     2c6:	84 e0       	ldi	r24, 0x04	; 4
     2c8:	f8 01       	movw	r30, r16
     2ca:	84 83       	std	Z+4, r24	; 0x04
		packet.flags = (CLEAN_SESSION);
     2cc:	87 83       	std	Z+7, r24	; 0x07
		packet.duration = KEEPALIVE;
     2ce:	88 ec       	ldi	r24, 0xC8	; 200
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	96 83       	std	Z+6, r25	; 0x06
     2d4:	85 83       	std	Z+5, r24	; 0x05
		packet.clientId =this->clientId;
     2d6:	82 81       	ldd	r24, Z+2	; 0x02
     2d8:	87 87       	std	Z+15, r24	; 0x0f
		unsigned char payload[20];
		packet.gen_packet(payload, 0x00);
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	be 01       	movw	r22, r28
     2de:	6f 5f       	subi	r22, 0xFF	; 255
     2e0:	7f 4f       	sbci	r23, 0xFF	; 255
     2e2:	c7 01       	movw	r24, r14
     2e4:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN12MQTTSNPacket10gen_packetERA20_hh>
		network->sendpacket(payload, payload[0]);
     2e8:	49 81       	ldd	r20, Y+1	; 0x01
     2ea:	be 01       	movw	r22, r28
     2ec:	6f 5f       	subi	r22, 0xFF	; 255
     2ee:	7f 4f       	sbci	r23, 0xFF	; 255
     2f0:	f8 01       	movw	r30, r16
     2f2:	80 81       	ld	r24, Z
     2f4:	91 81       	ldd	r25, Z+1	; 0x01
     2f6:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN9SensorNet10sendpacketEPKvh>
		this->currentState = STATE_WAIT_CONNACK;
     2fa:	80 e1       	ldi	r24, 0x10	; 16
     2fc:	f8 01       	movw	r30, r16
     2fe:	86 ab       	std	Z+54, r24	; 0x36
		
		this->lastTransmission = Timing::millis();
     300:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN6Timing6millisEv>
     304:	f8 01       	movw	r30, r16
     306:	67 ab       	std	Z+55, r22	; 0x37
     308:	70 af       	std	Z+56, r23	; 0x38
     30a:	81 af       	std	Z+57, r24	; 0x39
     30c:	92 af       	std	Z+58, r25	; 0x3a
}
     30e:	64 96       	adiw	r28, 0x14	; 20
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	f8 94       	cli
     314:	de bf       	out	0x3e, r29	; 62
     316:	0f be       	out	0x3f, r0	; 63
     318:	cd bf       	out	0x3d, r28	; 61
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	ff 90       	pop	r15
     324:	ef 90       	pop	r14
     326:	08 95       	ret

00000328 <_ZN6MQTTSN10disconnectEb>:
void MQTTSN::disconnect(bool isresponse)
{
     328:	df 92       	push	r13
     32a:	ef 92       	push	r14
     32c:	ff 92       	push	r15
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	64 97       	sbiw	r28, 0x14	; 20
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	f8 94       	cli
     340:	de bf       	out	0x3e, r29	; 62
     342:	0f be       	out	0x3f, r0	; 63
     344:	cd bf       	out	0x3d, r28	; 61
     346:	8c 01       	movw	r16, r24
     348:	d6 2e       	mov	r13, r22
	packet.sanitise();
     34a:	7c 01       	movw	r14, r24
     34c:	83 e0       	ldi	r24, 0x03	; 3
     34e:	e8 0e       	add	r14, r24
     350:	f1 1c       	adc	r15, r1
     352:	c7 01       	movw	r24, r14
     354:	0e 94 11 04 	call	0x822	; 0x822 <_ZN12MQTTSNPacket8sanitiseEv>
	packet.msgType = DISCONNECT;
     358:	88 e1       	ldi	r24, 0x18	; 24
     35a:	f8 01       	movw	r30, r16
     35c:	84 83       	std	Z+4, r24	; 0x04
	unsigned char payload[20];
	packet.gen_packet(payload, 0x00);
     35e:	40 e0       	ldi	r20, 0x00	; 0
     360:	be 01       	movw	r22, r28
     362:	6f 5f       	subi	r22, 0xFF	; 255
     364:	7f 4f       	sbci	r23, 0xFF	; 255
     366:	c7 01       	movw	r24, r14
     368:	0e 94 da 01 	call	0x3b4	; 0x3b4 <_ZN12MQTTSNPacket10gen_packetERA20_hh>
	network->sendpacket(payload, payload[0]);
     36c:	49 81       	ldd	r20, Y+1	; 0x01
     36e:	be 01       	movw	r22, r28
     370:	6f 5f       	subi	r22, 0xFF	; 255
     372:	7f 4f       	sbci	r23, 0xFF	; 255
     374:	f8 01       	movw	r30, r16
     376:	80 81       	ld	r24, Z
     378:	91 81       	ldd	r25, Z+1	; 0x01
     37a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN9SensorNet10sendpacketEPKvh>
	if (isresponse != true)
     37e:	d1 10       	cpse	r13, r1
     380:	03 c0       	rjmp	.+6      	; 0x388 <_ZN6MQTTSN10disconnectEb+0x60>
	this->currentState = STATE_WAIT_DISCONNECT;
     382:	80 e7       	ldi	r24, 0x70	; 112
     384:	f8 01       	movw	r30, r16
     386:	86 ab       	std	Z+54, r24	; 0x36
	
		this->lastTransmission = Timing::millis();
     388:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN6Timing6millisEv>
     38c:	f8 01       	movw	r30, r16
     38e:	67 ab       	std	Z+55, r22	; 0x37
     390:	70 af       	std	Z+56, r23	; 0x38
     392:	81 af       	std	Z+57, r24	; 0x39
     394:	92 af       	std	Z+58, r25	; 0x3a
}
     396:	64 96       	adiw	r28, 0x14	; 20
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	ff 90       	pop	r15
     3ac:	ef 90       	pop	r14
     3ae:	df 90       	pop	r13
     3b0:	08 95       	ret

000003b2 <_ZN12MQTTSNPacketD1Ev>:
			for (t= 3; t<(uint8_t)length; t++)
			{
				this->willTopic[t - 3] =	payload[t];
			}
		}
		return true;
     3b2:	08 95       	ret

000003b4 <_ZN12MQTTSNPacket10gen_packetERA20_hh>:
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
			{
				this->willMsg[t - 3] =	payload[t];
			}
			
		}
		return true;
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	fc 01       	movw	r30, r24
     3be:	db 01       	movw	r26, r22
     3c0:	91 81       	ldd	r25, Z+1	; 0x01
	{
		this->returnCode = 	(uint8_t)payload[2];
		return true;
	}
	return false;
}
     3c2:	94 30       	cpi	r25, 0x04	; 4
     3c4:	e9 f4       	brne	.+58     	; 0x400 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x4c>
     3c6:	84 81       	ldd	r24, Z+4	; 0x04
{
	if (msgType == CONNECT)
	{
		/*VARIABLE LENGTH MESSAGE (FORCE FIXED) */
		//mask off unused flags ( only need CleanSession and Will)
		this->flags = this->flags & 0b0000110;
     3c8:	86 70       	andi	r24, 0x06	; 6
     3ca:	84 83       	std	Z+4, r24	; 0x04
		payloadOut[0] = 0x07;
     3cc:	87 e0       	ldi	r24, 0x07	; 7
     3ce:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     3d0:	81 81       	ldd	r24, Z+1	; 0x01
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	8c 93       	st	X, r24
     3d6:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->flags;
     3d8:	84 81       	ldd	r24, Z+4	; 0x04
     3da:	12 96       	adiw	r26, 0x02	; 2
     3dc:	8c 93       	st	X, r24
     3de:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = this->protocolId;
     3e0:	87 81       	ldd	r24, Z+7	; 0x07
     3e2:	13 96       	adiw	r26, 0x03	; 3
     3e4:	8c 93       	st	X, r24
     3e6:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = (this->duration >> 8);
     3e8:	83 81       	ldd	r24, Z+3	; 0x03
     3ea:	14 96       	adiw	r26, 0x04	; 4
     3ec:	8c 93       	st	X, r24
     3ee:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = this->duration;
     3f0:	82 81       	ldd	r24, Z+2	; 0x02
     3f2:	15 96       	adiw	r26, 0x05	; 5
     3f4:	8c 93       	st	X, r24
     3f6:	15 97       	sbiw	r26, 0x05	; 5
		payloadOut[6] = this->clientId;
     3f8:	84 85       	ldd	r24, Z+12	; 0x0c
     3fa:	16 96       	adiw	r26, 0x06	; 6
     3fc:	8c 93       	st	X, r24
		return;
     3fe:	0c c2       	rjmp	.+1048   	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == CONNACK)
     400:	95 30       	cpi	r25, 0x05	; 5
     402:	51 f4       	brne	.+20     	; 0x418 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x64>
	{
		payloadOut[0] = 0x03;
     404:	83 e0       	ldi	r24, 0x03	; 3
     406:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     408:	81 81       	ldd	r24, Z+1	; 0x01
     40a:	11 96       	adiw	r26, 0x01	; 1
     40c:	8c 93       	st	X, r24
     40e:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->returnCode;
     410:	81 85       	ldd	r24, Z+9	; 0x09
     412:	12 96       	adiw	r26, 0x02	; 2
     414:	8c 93       	st	X, r24
		return;
     416:	00 c2       	rjmp	.+1024   	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if ((msgType == WILLTOPICREQ) | (msgType == WILLMSGREQ))
     418:	21 e0       	ldi	r18, 0x01	; 1
     41a:	98 30       	cpi	r25, 0x08	; 8
     41c:	09 f0       	breq	.+2      	; 0x420 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x6c>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	21 11       	cpse	r18, r1
     422:	06 c0       	rjmp	.+12     	; 0x430 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x7c>
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	96 30       	cpi	r25, 0x06	; 6
     428:	09 f0       	breq	.+2      	; 0x42c <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x78>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	88 23       	and	r24, r24
     42e:	31 f0       	breq	.+12     	; 0x43c <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x88>
	{
		payloadOut[0] = 0x02;
     430:	82 e0       	ldi	r24, 0x02	; 2
     432:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     434:	81 81       	ldd	r24, Z+1	; 0x01
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	8c 93       	st	X, r24
		return;
     43a:	ee c1       	rjmp	.+988    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == WILLTOPIC)
     43c:	97 30       	cpi	r25, 0x07	; 7
     43e:	69 f5       	brne	.+90     	; 0x49a <_ZN12MQTTSNPacket10gen_packetERA20_hh+0xe6>
	{
		this->flags = (this->flags & 0b01110000);
     440:	84 81       	ldd	r24, Z+4	; 0x04
     442:	80 77       	andi	r24, 0x70	; 112
     444:	84 83       	std	Z+4, r24	; 0x04
		if (this->flags && this->willTopic) //if flags and willtopic are empty then it is a reset packet length 2.
     446:	88 23       	and	r24, r24
     448:	39 f0       	breq	.+14     	; 0x458 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0xa4>
     44a:	ed 3d       	cpi	r30, 0xDD	; 221
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	f8 07       	cpc	r31, r24
     450:	19 f0       	breq	.+6      	; 0x458 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0xa4>
		{
			payloadOut[0] =0x02;
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	8c 93       	st	X, r24
     456:	1d c0       	rjmp	.+58     	; 0x492 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0xde>
		}
		else
		{
			payloadOut[0] =varLength + 3;
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	84 0f       	add	r24, r20
     45c:	8c 93       	st	X, r24
			payloadOut[2] = this->flags;
     45e:	84 81       	ldd	r24, Z+4	; 0x04
     460:	12 96       	adiw	r26, 0x02	; 2
     462:	8c 93       	st	X, r24
     464:	12 97       	sbiw	r26, 0x02	; 2
			for (int t= 0; t< varLength; t++)
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	14 16       	cp	r1, r20
     46a:	15 06       	cpc	r1, r21
     46c:	94 f4       	brge	.+36     	; 0x492 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0xde>
     46e:	9f 01       	movw	r18, r30
     470:	2d 5d       	subi	r18, 0xDD	; 221
     472:	3f 4f       	sbci	r19, 0xFF	; 255
     474:	8d 01       	movw	r16, r26
     476:	0d 5f       	subi	r16, 0xFD	; 253
     478:	1f 4f       	sbci	r17, 0xFF	; 255
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
			{
				payloadOut[3+t] = this->willTopic[t];
     47e:	e9 01       	movw	r28, r18
     480:	69 91       	ld	r22, Y+
     482:	9e 01       	movw	r18, r28
     484:	e8 01       	movw	r28, r16
     486:	69 93       	st	Y+, r22
     488:	8e 01       	movw	r16, r28
		}
		else
		{
			payloadOut[0] =varLength + 3;
			payloadOut[2] = this->flags;
			for (int t= 0; t< varLength; t++)
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	84 17       	cp	r24, r20
     48e:	95 07       	cpc	r25, r21
     490:	b4 f3       	brlt	.-20     	; 0x47e <_ZN12MQTTSNPacket10gen_packetERA20_hh+0xca>
			{
				payloadOut[3+t] = this->willTopic[t];
			}
		}
		payloadOut[1] = this->msgType;
     492:	81 81       	ldd	r24, Z+1	; 0x01
     494:	11 96       	adiw	r26, 0x01	; 1
     496:	8c 93       	st	X, r24
		return;
     498:	bf c1       	rjmp	.+894    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == WILLMSG)
     49a:	99 30       	cpi	r25, 0x09	; 9
     49c:	01 f5       	brne	.+64     	; 0x4de <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x12a>
	{
		payloadOut[0] = varLength +2;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	84 0f       	add	r24, r20
     4a2:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     4a4:	81 81       	ldd	r24, Z+1	; 0x01
     4a6:	11 96       	adiw	r26, 0x01	; 1
     4a8:	8c 93       	st	X, r24
     4aa:	11 97       	sbiw	r26, 0x01	; 1
		for (int t= 0; t< varLength; t++)
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	14 16       	cp	r1, r20
     4b0:	15 06       	cpc	r1, r21
     4b2:	0c f0       	brlt	.+2      	; 0x4b6 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x102>
     4b4:	b1 c1       	rjmp	.+866    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[2+t] = this->willMsg[t];
     4b6:	80 a1       	ldd	r24, Z+32	; 0x20
     4b8:	12 96       	adiw	r26, 0x02	; 2
     4ba:	8c 93       	st	X, r24
     4bc:	12 97       	sbiw	r26, 0x02	; 2
	}
	else if (msgType == WILLMSG)
	{
		payloadOut[0] = varLength +2;
		payloadOut[1] = this->msgType;
		for (int t= 0; t< varLength; t++)
     4be:	42 30       	cpi	r20, 0x02	; 2
     4c0:	51 05       	cpc	r21, r1
     4c2:	0c f4       	brge	.+2      	; 0x4c6 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x112>
     4c4:	a9 c1       	rjmp	.+850    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[2+t] = this->willMsg[t];
     4c6:	81 a1       	ldd	r24, Z+33	; 0x21
     4c8:	13 96       	adiw	r26, 0x03	; 3
     4ca:	8c 93       	st	X, r24
     4cc:	13 97       	sbiw	r26, 0x03	; 3
	}
	else if (msgType == WILLMSG)
	{
		payloadOut[0] = varLength +2;
		payloadOut[1] = this->msgType;
		for (int t= 0; t< varLength; t++)
     4ce:	43 30       	cpi	r20, 0x03	; 3
     4d0:	51 05       	cpc	r21, r1
     4d2:	0c f4       	brge	.+2      	; 0x4d6 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x122>
     4d4:	a1 c1       	rjmp	.+834    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[2+t] = this->willMsg[t];
     4d6:	82 a1       	ldd	r24, Z+34	; 0x22
     4d8:	14 96       	adiw	r26, 0x04	; 4
     4da:	8c 93       	st	X, r24
     4dc:	9d c1       	rjmp	.+826    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		}
		return;
	}
	else if (msgType == REGISTER)
     4de:	9a 30       	cpi	r25, 0x0A	; 10
     4e0:	39 f5       	brne	.+78     	; 0x530 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x17c>
	{
		payloadOut[0] = varLength + 6;
     4e2:	86 e0       	ldi	r24, 0x06	; 6
     4e4:	84 0f       	add	r24, r20
     4e6:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     4e8:	81 81       	ldd	r24, Z+1	; 0x01
     4ea:	11 96       	adiw	r26, 0x01	; 1
     4ec:	8c 93       	st	X, r24
     4ee:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = (this->topicId >> 8);
     4f0:	83 85       	ldd	r24, Z+11	; 0x0b
     4f2:	12 96       	adiw	r26, 0x02	; 2
     4f4:	8c 93       	st	X, r24
     4f6:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = this->topicId;
     4f8:	82 85       	ldd	r24, Z+10	; 0x0a
     4fa:	13 96       	adiw	r26, 0x03	; 3
     4fc:	8c 93       	st	X, r24
     4fe:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = (this->msgId >> 8);
     500:	86 81       	ldd	r24, Z+6	; 0x06
     502:	14 96       	adiw	r26, 0x04	; 4
     504:	8c 93       	st	X, r24
     506:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = this->msgId;
     508:	85 81       	ldd	r24, Z+5	; 0x05
     50a:	15 96       	adiw	r26, 0x05	; 5
     50c:	8c 93       	st	X, r24
     50e:	15 97       	sbiw	r26, 0x05	; 5
		for (int t= 0; t< varLength; t++)
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	14 16       	cp	r1, r20
     514:	15 06       	cpc	r1, r21
     516:	0c f0       	brlt	.+2      	; 0x51a <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x166>
     518:	7f c1       	rjmp	.+766    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
     51a:	70 96       	adiw	r30, 0x10	; 16
     51c:	16 96       	adiw	r26, 0x06	; 6
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
		{
			payloadOut[6+t] = this->topicname[t];
     522:	21 91       	ld	r18, Z+
     524:	2d 93       	st	X+, r18
		payloadOut[1] = this->msgType;
		payloadOut[2] = (this->topicId >> 8);
		payloadOut[3] = this->topicId;
		payloadOut[4] = (this->msgId >> 8);
		payloadOut[5] = this->msgId;
		for (int t= 0; t< varLength; t++)
     526:	01 96       	adiw	r24, 0x01	; 1
     528:	84 17       	cp	r24, r20
     52a:	95 07       	cpc	r25, r21
     52c:	d4 f3       	brlt	.-12     	; 0x522 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x16e>
     52e:	74 c1       	rjmp	.+744    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[6+t] = this->topicname[t];
		}
		return;
	}
	else if (msgType == REGACK)
     530:	9b 30       	cpi	r25, 0x0B	; 11
     532:	d1 f4       	brne	.+52     	; 0x568 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x1b4>
	{
		payloadOut[0] = 0x07;
     534:	87 e0       	ldi	r24, 0x07	; 7
     536:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     538:	81 81       	ldd	r24, Z+1	; 0x01
     53a:	11 96       	adiw	r26, 0x01	; 1
     53c:	8c 93       	st	X, r24
     53e:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = (this->topicId >> 8);
     540:	83 85       	ldd	r24, Z+11	; 0x0b
     542:	12 96       	adiw	r26, 0x02	; 2
     544:	8c 93       	st	X, r24
     546:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = this->topicId;
     548:	82 85       	ldd	r24, Z+10	; 0x0a
     54a:	13 96       	adiw	r26, 0x03	; 3
     54c:	8c 93       	st	X, r24
     54e:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = (this->msgId >>8);
     550:	86 81       	ldd	r24, Z+6	; 0x06
     552:	14 96       	adiw	r26, 0x04	; 4
     554:	8c 93       	st	X, r24
     556:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = this->msgId;
     558:	85 81       	ldd	r24, Z+5	; 0x05
     55a:	15 96       	adiw	r26, 0x05	; 5
     55c:	8c 93       	st	X, r24
     55e:	15 97       	sbiw	r26, 0x05	; 5
		payloadOut[6] = this->returnCode;
     560:	81 85       	ldd	r24, Z+9	; 0x09
     562:	16 96       	adiw	r26, 0x06	; 6
     564:	8c 93       	st	X, r24
		return;
     566:	58 c1       	rjmp	.+688    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == PUBLISH)
     568:	9c 30       	cpi	r25, 0x0C	; 12
     56a:	b9 f5       	brne	.+110    	; 0x5da <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x226>
	{
		this->flags = (this->flags & 0b11110011);
     56c:	84 81       	ldd	r24, Z+4	; 0x04
     56e:	83 7f       	andi	r24, 0xF3	; 243
     570:	84 83       	std	Z+4, r24	; 0x04
		payloadOut[0] = 7+varLength;
     572:	87 e0       	ldi	r24, 0x07	; 7
     574:	84 0f       	add	r24, r20
     576:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     578:	81 81       	ldd	r24, Z+1	; 0x01
     57a:	11 96       	adiw	r26, 0x01	; 1
     57c:	8c 93       	st	X, r24
     57e:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->flags;
     580:	84 81       	ldd	r24, Z+4	; 0x04
     582:	12 96       	adiw	r26, 0x02	; 2
     584:	8c 93       	st	X, r24
     586:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = (this-> topicId >>8);
     588:	83 85       	ldd	r24, Z+11	; 0x0b
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	8c 93       	st	X, r24
     58e:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = this->topicId;
     590:	82 85       	ldd	r24, Z+10	; 0x0a
     592:	14 96       	adiw	r26, 0x04	; 4
     594:	8c 93       	st	X, r24
     596:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = (this->msgId >>8);
     598:	86 81       	ldd	r24, Z+6	; 0x06
     59a:	15 96       	adiw	r26, 0x05	; 5
     59c:	8c 93       	st	X, r24
     59e:	15 97       	sbiw	r26, 0x05	; 5
		payloadOut[6] = (this->msgId);
     5a0:	85 81       	ldd	r24, Z+5	; 0x05
     5a2:	16 96       	adiw	r26, 0x06	; 6
     5a4:	8c 93       	st	X, r24
     5a6:	16 97       	sbiw	r26, 0x06	; 6
		for (int t= 0; t< varLength; t++)
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	14 16       	cp	r1, r20
     5ac:	15 06       	cpc	r1, r21
     5ae:	0c f0       	brlt	.+2      	; 0x5b2 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x1fe>
     5b0:	33 c1       	rjmp	.+614    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[7+t] = this->data[t];
     5b2:	85 85       	ldd	r24, Z+13	; 0x0d
     5b4:	17 96       	adiw	r26, 0x07	; 7
     5b6:	8c 93       	st	X, r24
     5b8:	17 97       	sbiw	r26, 0x07	; 7
		payloadOut[2] = this->flags;
		payloadOut[3] = (this-> topicId >>8);
		payloadOut[4] = this->topicId;
		payloadOut[5] = (this->msgId >>8);
		payloadOut[6] = (this->msgId);
		for (int t= 0; t< varLength; t++)
     5ba:	42 30       	cpi	r20, 0x02	; 2
     5bc:	51 05       	cpc	r21, r1
     5be:	0c f4       	brge	.+2      	; 0x5c2 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x20e>
     5c0:	2b c1       	rjmp	.+598    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[7+t] = this->data[t];
     5c2:	86 85       	ldd	r24, Z+14	; 0x0e
     5c4:	18 96       	adiw	r26, 0x08	; 8
     5c6:	8c 93       	st	X, r24
     5c8:	18 97       	sbiw	r26, 0x08	; 8
		payloadOut[2] = this->flags;
		payloadOut[3] = (this-> topicId >>8);
		payloadOut[4] = this->topicId;
		payloadOut[5] = (this->msgId >>8);
		payloadOut[6] = (this->msgId);
		for (int t= 0; t< varLength; t++)
     5ca:	43 30       	cpi	r20, 0x03	; 3
     5cc:	51 05       	cpc	r21, r1
     5ce:	0c f4       	brge	.+2      	; 0x5d2 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x21e>
     5d0:	23 c1       	rjmp	.+582    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[7+t] = this->data[t];
     5d2:	87 85       	ldd	r24, Z+15	; 0x0f
     5d4:	19 96       	adiw	r26, 0x09	; 9
     5d6:	8c 93       	st	X, r24
     5d8:	1f c1       	rjmp	.+574    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		}
		return;
	}
	else if (msgType == PUBACK)
     5da:	9d 30       	cpi	r25, 0x0D	; 13
     5dc:	d1 f4       	brne	.+52     	; 0x612 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x25e>
	{
		payloadOut[0] = 0x07;
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     5e2:	81 81       	ldd	r24, Z+1	; 0x01
     5e4:	11 96       	adiw	r26, 0x01	; 1
     5e6:	8c 93       	st	X, r24
     5e8:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = (this->topicId >>8);
     5ea:	83 85       	ldd	r24, Z+11	; 0x0b
     5ec:	12 96       	adiw	r26, 0x02	; 2
     5ee:	8c 93       	st	X, r24
     5f0:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = this->topicId;
     5f2:	82 85       	ldd	r24, Z+10	; 0x0a
     5f4:	13 96       	adiw	r26, 0x03	; 3
     5f6:	8c 93       	st	X, r24
     5f8:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = (this->msgId >> 8);
     5fa:	86 81       	ldd	r24, Z+6	; 0x06
     5fc:	14 96       	adiw	r26, 0x04	; 4
     5fe:	8c 93       	st	X, r24
     600:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = this->msgId;
     602:	85 81       	ldd	r24, Z+5	; 0x05
     604:	15 96       	adiw	r26, 0x05	; 5
     606:	8c 93       	st	X, r24
     608:	15 97       	sbiw	r26, 0x05	; 5
		payloadOut[6] = returnCode;
     60a:	81 85       	ldd	r24, Z+9	; 0x09
     60c:	16 96       	adiw	r26, 0x06	; 6
     60e:	8c 93       	st	X, r24
		return;
     610:	03 c1       	rjmp	.+518    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	/* QOS L2 */
	else if ((msgType == PUBCOMP) | (msgType == PUBREC) | (msgType == PUBREL))
     612:	82 ef       	ldi	r24, 0xF2	; 242
     614:	89 0f       	add	r24, r25
     616:	83 30       	cpi	r24, 0x03	; 3
     618:	70 f4       	brcc	.+28     	; 0x636 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x282>
	{
		payloadOut[0] = 0x04;
     61a:	84 e0       	ldi	r24, 0x04	; 4
     61c:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     61e:	81 81       	ldd	r24, Z+1	; 0x01
     620:	11 96       	adiw	r26, 0x01	; 1
     622:	8c 93       	st	X, r24
     624:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = (this->msgId >>8 );
     626:	86 81       	ldd	r24, Z+6	; 0x06
     628:	12 96       	adiw	r26, 0x02	; 2
     62a:	8c 93       	st	X, r24
     62c:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = this->msgId;
     62e:	85 81       	ldd	r24, Z+5	; 0x05
     630:	13 96       	adiw	r26, 0x03	; 3
     632:	8c 93       	st	X, r24
		return;
     634:	f1 c0       	rjmp	.+482    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	/* END QOS L2 */
	else if ((msgType == SUBSCRIBE)|(msgType == UNSUBSCRIBE))
     636:	21 e0       	ldi	r18, 0x01	; 1
     638:	92 31       	cpi	r25, 0x12	; 18
     63a:	09 f0       	breq	.+2      	; 0x63e <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x28a>
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	94 31       	cpi	r25, 0x14	; 20
     642:	09 f0       	breq	.+2      	; 0x646 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x292>
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	81 11       	cpse	r24, r1
     648:	02 c0       	rjmp	.+4      	; 0x64e <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x29a>
     64a:	22 23       	and	r18, r18
     64c:	21 f1       	breq	.+72     	; 0x696 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x2e2>
	{
		/*VARIABLE LENGTH MESSAGE (FORCE FIXED) */
		//only works for topicID Not topic name. this is to keep packet length short.
		if (msgType == SUBSCRIBE)
     64e:	22 23       	and	r18, r18
     650:	19 f0       	breq	.+6      	; 0x658 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x2a4>
		this->flags = this->flags & 0b11100011;
     652:	94 81       	ldd	r25, Z+4	; 0x04
     654:	93 7e       	andi	r25, 0xE3	; 227
     656:	94 83       	std	Z+4, r25	; 0x04
		if (msgType == UNSUBSCRIBE)
     658:	88 23       	and	r24, r24
     65a:	19 f0       	breq	.+6      	; 0x662 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x2ae>
		this->flags = this->flags & 0b00000011;
     65c:	84 81       	ldd	r24, Z+4	; 0x04
     65e:	83 70       	andi	r24, 0x03	; 3
     660:	84 83       	std	Z+4, r24	; 0x04
		
		payloadOut[0] = 0x07;
     662:	87 e0       	ldi	r24, 0x07	; 7
     664:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     666:	81 81       	ldd	r24, Z+1	; 0x01
     668:	11 96       	adiw	r26, 0x01	; 1
     66a:	8c 93       	st	X, r24
     66c:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->flags;
     66e:	84 81       	ldd	r24, Z+4	; 0x04
     670:	12 96       	adiw	r26, 0x02	; 2
     672:	8c 93       	st	X, r24
     674:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = (this->msgId >>8);
     676:	86 81       	ldd	r24, Z+6	; 0x06
     678:	13 96       	adiw	r26, 0x03	; 3
     67a:	8c 93       	st	X, r24
     67c:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = (this->msgId);
     67e:	85 81       	ldd	r24, Z+5	; 0x05
     680:	14 96       	adiw	r26, 0x04	; 4
     682:	8c 93       	st	X, r24
     684:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = (this->topicId >>8);
     686:	83 85       	ldd	r24, Z+11	; 0x0b
     688:	15 96       	adiw	r26, 0x05	; 5
     68a:	8c 93       	st	X, r24
     68c:	15 97       	sbiw	r26, 0x05	; 5
		payloadOut[6] = this->topicId;
     68e:	82 85       	ldd	r24, Z+10	; 0x0a
     690:	16 96       	adiw	r26, 0x06	; 6
     692:	8c 93       	st	X, r24
		return;
     694:	c1 c0       	rjmp	.+386    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == SUBACK)
     696:	93 31       	cpi	r25, 0x13	; 19
     698:	09 f5       	brne	.+66     	; 0x6dc <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x328>
	{
		this->flags = this->flags & 0b01100000;
     69a:	84 81       	ldd	r24, Z+4	; 0x04
     69c:	80 76       	andi	r24, 0x60	; 96
     69e:	84 83       	std	Z+4, r24	; 0x04
		payloadOut[0] = 0x08;
     6a0:	88 e0       	ldi	r24, 0x08	; 8
     6a2:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     6a4:	81 81       	ldd	r24, Z+1	; 0x01
     6a6:	11 96       	adiw	r26, 0x01	; 1
     6a8:	8c 93       	st	X, r24
     6aa:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->flags;
     6ac:	84 81       	ldd	r24, Z+4	; 0x04
     6ae:	12 96       	adiw	r26, 0x02	; 2
     6b0:	8c 93       	st	X, r24
     6b2:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = (this->topicId>>8);
     6b4:	83 85       	ldd	r24, Z+11	; 0x0b
     6b6:	13 96       	adiw	r26, 0x03	; 3
     6b8:	8c 93       	st	X, r24
     6ba:	13 97       	sbiw	r26, 0x03	; 3
		payloadOut[4] = this->topicId;
     6bc:	82 85       	ldd	r24, Z+10	; 0x0a
     6be:	14 96       	adiw	r26, 0x04	; 4
     6c0:	8c 93       	st	X, r24
     6c2:	14 97       	sbiw	r26, 0x04	; 4
		payloadOut[5] = (this->msgId >> 8);
     6c4:	86 81       	ldd	r24, Z+6	; 0x06
     6c6:	15 96       	adiw	r26, 0x05	; 5
     6c8:	8c 93       	st	X, r24
     6ca:	15 97       	sbiw	r26, 0x05	; 5
		payloadOut[6] = this->msgId;
     6cc:	85 81       	ldd	r24, Z+5	; 0x05
     6ce:	16 96       	adiw	r26, 0x06	; 6
     6d0:	8c 93       	st	X, r24
     6d2:	16 97       	sbiw	r26, 0x06	; 6
		payloadOut[7] = this->returnCode;
     6d4:	81 85       	ldd	r24, Z+9	; 0x09
     6d6:	17 96       	adiw	r26, 0x07	; 7
     6d8:	8c 93       	st	X, r24
		return;
     6da:	9e c0       	rjmp	.+316    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == UNSUBACK)
     6dc:	95 31       	cpi	r25, 0x15	; 21
     6de:	71 f4       	brne	.+28     	; 0x6fc <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x348>
	{
		payloadOut[0] = 0x04;
     6e0:	84 e0       	ldi	r24, 0x04	; 4
     6e2:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     6e4:	81 81       	ldd	r24, Z+1	; 0x01
     6e6:	11 96       	adiw	r26, 0x01	; 1
     6e8:	8c 93       	st	X, r24
     6ea:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = (this->msgId >>8);
     6ec:	86 81       	ldd	r24, Z+6	; 0x06
     6ee:	12 96       	adiw	r26, 0x02	; 2
     6f0:	8c 93       	st	X, r24
     6f2:	12 97       	sbiw	r26, 0x02	; 2
		payloadOut[3] = this->msgId;
     6f4:	85 81       	ldd	r24, Z+5	; 0x05
     6f6:	13 96       	adiw	r26, 0x03	; 3
     6f8:	8c 93       	st	X, r24
		return;
     6fa:	8e c0       	rjmp	.+284    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == PINGREQ)
     6fc:	96 31       	cpi	r25, 0x16	; 22
     6fe:	51 f4       	brne	.+20     	; 0x714 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x360>
	{
		/*VARIABLE LENGTH MESSAGE (FORCE FIXED) */
		payloadOut[0] = 0x03;
     700:	83 e0       	ldi	r24, 0x03	; 3
     702:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     704:	81 81       	ldd	r24, Z+1	; 0x01
     706:	11 96       	adiw	r26, 0x01	; 1
     708:	8c 93       	st	X, r24
     70a:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->clientId;
     70c:	84 85       	ldd	r24, Z+12	; 0x0c
     70e:	12 96       	adiw	r26, 0x02	; 2
     710:	8c 93       	st	X, r24
		return;
     712:	82 c0       	rjmp	.+260    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == PINGRESP)
     714:	97 31       	cpi	r25, 0x17	; 23
     716:	31 f4       	brne	.+12     	; 0x724 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x370>
	{
		payloadOut[0] = 0x2;
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     71c:	81 81       	ldd	r24, Z+1	; 0x01
     71e:	11 96       	adiw	r26, 0x01	; 1
     720:	8c 93       	st	X, r24
		return;
     722:	7a c0       	rjmp	.+244    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == DISCONNECT)
     724:	98 31       	cpi	r25, 0x18	; 24
     726:	a9 f4       	brne	.+42     	; 0x752 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x39e>
	{
		if (this->duration)
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	93 81       	ldd	r25, Z+3	; 0x03
     72c:	89 2b       	or	r24, r25
     72e:	59 f0       	breq	.+22     	; 0x746 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x392>
		{
			payloadOut[0] = 0x04;
     730:	84 e0       	ldi	r24, 0x04	; 4
     732:	8c 93       	st	X, r24
			payloadOut[2] = (this->duration >>8);
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	12 96       	adiw	r26, 0x02	; 2
     738:	8c 93       	st	X, r24
     73a:	12 97       	sbiw	r26, 0x02	; 2
			payloadOut[3] = this->duration;
     73c:	82 81       	ldd	r24, Z+2	; 0x02
     73e:	13 96       	adiw	r26, 0x03	; 3
     740:	8c 93       	st	X, r24
     742:	13 97       	sbiw	r26, 0x03	; 3
     744:	02 c0       	rjmp	.+4      	; 0x74a <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x396>
		}
		else
		{
			payloadOut[0] = 0x02;
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	8c 93       	st	X, r24
		}
		payloadOut[1] = this->msgType;
     74a:	81 81       	ldd	r24, Z+1	; 0x01
     74c:	11 96       	adiw	r26, 0x01	; 1
     74e:	8c 93       	st	X, r24
		return;
     750:	63 c0       	rjmp	.+198    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == WILLTOPICUPD)
     752:	9a 31       	cpi	r25, 0x1A	; 26
     754:	69 f5       	brne	.+90     	; 0x7b0 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x3fc>
	{
		this->flags = this->flags & 0b01110000;
     756:	84 81       	ldd	r24, Z+4	; 0x04
     758:	80 77       	andi	r24, 0x70	; 112
     75a:	84 83       	std	Z+4, r24	; 0x04
		if (this->flags && this->willTopic)
     75c:	88 23       	and	r24, r24
     75e:	39 f0       	breq	.+14     	; 0x76e <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x3ba>
     760:	ed 3d       	cpi	r30, 0xDD	; 221
     762:	df ef       	ldi	r29, 0xFF	; 255
     764:	fd 07       	cpc	r31, r29
     766:	19 f0       	breq	.+6      	; 0x76e <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x3ba>
		{
			payloadOut[0] = 0x02;
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	8c 93       	st	X, r24
     76c:	1d c0       	rjmp	.+58     	; 0x7a8 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x3f4>
		}
		else
		{
			payloadOut[0] = 3+ varLength;
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	84 0f       	add	r24, r20
     772:	8c 93       	st	X, r24
			payloadOut[2] = this->flags;
     774:	84 81       	ldd	r24, Z+4	; 0x04
     776:	12 96       	adiw	r26, 0x02	; 2
     778:	8c 93       	st	X, r24
     77a:	12 97       	sbiw	r26, 0x02	; 2
			for (int t= 0; t< varLength; t++)
     77c:	50 e0       	ldi	r21, 0x00	; 0
     77e:	14 16       	cp	r1, r20
     780:	15 06       	cpc	r1, r21
     782:	94 f4       	brge	.+36     	; 0x7a8 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x3f4>
     784:	9f 01       	movw	r18, r30
     786:	2d 5d       	subi	r18, 0xDD	; 221
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	8d 01       	movw	r16, r26
     78c:	0d 5f       	subi	r16, 0xFD	; 253
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
			{
				payloadOut[3+t] = this->willTopic[t];
     794:	e9 01       	movw	r28, r18
     796:	69 91       	ld	r22, Y+
     798:	9e 01       	movw	r18, r28
     79a:	e8 01       	movw	r28, r16
     79c:	69 93       	st	Y+, r22
     79e:	8e 01       	movw	r16, r28
		}
		else
		{
			payloadOut[0] = 3+ varLength;
			payloadOut[2] = this->flags;
			for (int t= 0; t< varLength; t++)
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	84 17       	cp	r24, r20
     7a4:	95 07       	cpc	r25, r21
     7a6:	b4 f3       	brlt	.-20     	; 0x794 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x3e0>
			{
				payloadOut[3+t] = this->willTopic[t];
			}
			
		}
		payloadOut[1] = this->msgType;
     7a8:	81 81       	ldd	r24, Z+1	; 0x01
     7aa:	11 96       	adiw	r26, 0x01	; 1
     7ac:	8c 93       	st	X, r24
		return;
     7ae:	34 c0       	rjmp	.+104    	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	}
	else if (msgType == WILLMSGUPD)
     7b0:	9c 31       	cpi	r25, 0x1C	; 28
     7b2:	e9 f4       	brne	.+58     	; 0x7ee <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x43a>
	{
		payloadOut[0] = 2 + varLength;
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	84 0f       	add	r24, r20
     7b8:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     7ba:	81 81       	ldd	r24, Z+1	; 0x01
     7bc:	11 96       	adiw	r26, 0x01	; 1
     7be:	8c 93       	st	X, r24
     7c0:	11 97       	sbiw	r26, 0x01	; 1
		for (int t= 0; t< varLength; t++)
     7c2:	84 2f       	mov	r24, r20
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	18 16       	cp	r1, r24
     7c8:	19 06       	cpc	r1, r25
     7ca:	34 f5       	brge	.+76     	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[2+t] = this->willMsg[t];
     7cc:	20 a1       	ldd	r18, Z+32	; 0x20
     7ce:	12 96       	adiw	r26, 0x02	; 2
     7d0:	2c 93       	st	X, r18
     7d2:	12 97       	sbiw	r26, 0x02	; 2
	}
	else if (msgType == WILLMSGUPD)
	{
		payloadOut[0] = 2 + varLength;
		payloadOut[1] = this->msgType;
		for (int t= 0; t< varLength; t++)
     7d4:	82 30       	cpi	r24, 0x02	; 2
     7d6:	91 05       	cpc	r25, r1
     7d8:	fc f0       	brlt	.+62     	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[2+t] = this->willMsg[t];
     7da:	21 a1       	ldd	r18, Z+33	; 0x21
     7dc:	13 96       	adiw	r26, 0x03	; 3
     7de:	2c 93       	st	X, r18
     7e0:	13 97       	sbiw	r26, 0x03	; 3
	}
	else if (msgType == WILLMSGUPD)
	{
		payloadOut[0] = 2 + varLength;
		payloadOut[1] = this->msgType;
		for (int t= 0; t< varLength; t++)
     7e2:	03 97       	sbiw	r24, 0x03	; 3
     7e4:	cc f0       	brlt	.+50     	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		{
			payloadOut[2+t] = this->willMsg[t];
     7e6:	82 a1       	ldd	r24, Z+34	; 0x22
     7e8:	14 96       	adiw	r26, 0x04	; 4
     7ea:	8c 93       	st	X, r24
     7ec:	15 c0       	rjmp	.+42     	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
		}
		return;
	}
	else if ((msgType == WILLTOPICRESP)| (msgType == WILLMSGRESP))
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	9d 31       	cpi	r25, 0x1D	; 29
     7f2:	09 f0       	breq	.+2      	; 0x7f6 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x442>
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	81 11       	cpse	r24, r1
     7f8:	06 c0       	rjmp	.+12     	; 0x806 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x452>
     7fa:	81 e0       	ldi	r24, 0x01	; 1
     7fc:	9b 31       	cpi	r25, 0x1B	; 27
     7fe:	09 f0       	breq	.+2      	; 0x802 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x44e>
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	88 23       	and	r24, r24
     804:	49 f0       	breq	.+18     	; 0x818 <_ZN12MQTTSNPacket10gen_packetERA20_hh+0x464>
	{
		payloadOut[0] = 0x03;
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	8c 93       	st	X, r24
		payloadOut[1] = this->msgType;
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	11 96       	adiw	r26, 0x01	; 1
     80e:	8c 93       	st	X, r24
     810:	11 97       	sbiw	r26, 0x01	; 1
		payloadOut[2] = this->returnCode;
     812:	81 85       	ldd	r24, Z+9	; 0x09
     814:	12 96       	adiw	r26, 0x02	; 2
     816:	8c 93       	st	X, r24
		return;
	}
}
     818:	df 91       	pop	r29
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <_ZN12MQTTSNPacket8sanitiseEv>:
void MQTTSNPacket::sanitise()
{
     822:	fc 01       	movw	r30, r24
	
	this->length = 0x00;
     824:	10 82       	st	Z, r1
	this->msgType = 0x00;
     826:	11 82       	std	Z+1, r1	; 0x01
	this->duration = 0x00;
     828:	13 82       	std	Z+3, r1	; 0x03
     82a:	12 82       	std	Z+2, r1	; 0x02
	this->flags = 0x00;
     82c:	14 82       	std	Z+4, r1	; 0x04
	this->msgId = 0x00;
     82e:	16 82       	std	Z+6, r1	; 0x06
     830:	15 82       	std	Z+5, r1	; 0x05
	this->protocolId = 0x01; // this is always this number
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	87 83       	std	Z+7, r24	; 0x07
	this->radius = 0x00;
     836:	10 86       	std	Z+8, r1	; 0x08
	this->returnCode = 0x00;
     838:	11 86       	std	Z+9, r1	; 0x09
	this->topicId = 0x00;
     83a:	13 86       	std	Z+11, r1	; 0x0b
     83c:	12 86       	std	Z+10, r1	; 0x0a
	this->clientId = 0x00;
     83e:	14 86       	std	Z+12, r1	; 0x0c
	this->data[0] = 0x00;
     840:	15 86       	std	Z+13, r1	; 0x0d
	this->data[1] = 0x00;
     842:	16 86       	std	Z+14, r1	; 0x0e
	this->data[2] = 0x00;
     844:	17 86       	std	Z+15, r1	; 0x0f
	this->topicname[0] = 0x00;
     846:	10 8a       	std	Z+16, r1	; 0x10
	this->topicname[1] = 0x00;
     848:	11 8a       	std	Z+17, r1	; 0x11
	this->topicname[2] = 0x00;
     84a:	12 8a       	std	Z+18, r1	; 0x12
	this->topicname[3] = 0x00;
     84c:	13 8a       	std	Z+19, r1	; 0x13
	this->topicname[4] = 0x00;
     84e:	14 8a       	std	Z+20, r1	; 0x14
	this->topicname[5] = 0x00;
     850:	15 8a       	std	Z+21, r1	; 0x15
	this->topicname[6] = 0x00;
     852:	16 8a       	std	Z+22, r1	; 0x16
	this->topicname[7] = 0x00;
     854:	17 8a       	std	Z+23, r1	; 0x17
	this->topicname[8] = 0x00;
     856:	10 8e       	std	Z+24, r1	; 0x18
	this->topicname[9] = 0x00;
     858:	11 8e       	std	Z+25, r1	; 0x19
	this->topicname[10] = 0x00;
     85a:	12 8e       	std	Z+26, r1	; 0x1a
	this->topicname[11] = 0x00;
     85c:	13 8e       	std	Z+27, r1	; 0x1b
	this->topicname[12] = 0x00;
     85e:	14 8e       	std	Z+28, r1	; 0x1c
	this->topicname[13] = 0x00;
     860:	15 8e       	std	Z+29, r1	; 0x1d
	this->topicname[14] = 0x00;
     862:	16 8e       	std	Z+30, r1	; 0x1e
	this->topicname[15] = 0x00;
     864:	17 8e       	std	Z+31, r1	; 0x1f
	this->willMsg[0] = 0x00;
     866:	10 a2       	std	Z+32, r1	; 0x20
	this->willMsg[1] = 0x00;
     868:	11 a2       	std	Z+33, r1	; 0x21
	this->willMsg[2] = 0x00;
     86a:	12 a2       	std	Z+34, r1	; 0x22
	this->willTopic[0] = 0x00;
     86c:	13 a2       	std	Z+35, r1	; 0x23
	this->willTopic[1] = 0x00;
     86e:	14 a2       	std	Z+36, r1	; 0x24
	this->willTopic[2] = 0x00;
     870:	15 a2       	std	Z+37, r1	; 0x25
	this->willTopic[3] = 0x00;
     872:	16 a2       	std	Z+38, r1	; 0x26
	this->willTopic[4] = 0x00;
     874:	17 a2       	std	Z+39, r1	; 0x27
	this->willTopic[5] = 0x00;
     876:	10 a6       	std	Z+40, r1	; 0x28
	this->willTopic[6] = 0x00;
     878:	11 a6       	std	Z+41, r1	; 0x29
	this->willTopic[7] = 0x00;
     87a:	12 a6       	std	Z+42, r1	; 0x2a
	this->willTopic[8] = 0x00;
     87c:	13 a6       	std	Z+43, r1	; 0x2b
	this->willTopic[9] = 0x00;
     87e:	14 a6       	std	Z+44, r1	; 0x2c
	this->willTopic[10] = 0x00;
     880:	15 a6       	std	Z+45, r1	; 0x2d
	this->willTopic[11] = 0x00;
     882:	16 a6       	std	Z+46, r1	; 0x2e
	this->willTopic[12] = 0x00;
     884:	17 a6       	std	Z+47, r1	; 0x2f
	this->willTopic[13] = 0x00;
     886:	10 aa       	std	Z+48, r1	; 0x30
	this->willTopic[14] = 0x00;
     888:	11 aa       	std	Z+49, r1	; 0x31
	this->willTopic[15] = 0x00;
     88a:	12 aa       	std	Z+50, r1	; 0x32
     88c:	08 95       	ret

0000088e <_ZN12MQTTSNPacketC1Ev>:
#include "MQTTSNPacket.h"


MQTTSNPacket::MQTTSNPacket()
{
	sanitise();
     88e:	0e 94 11 04 	call	0x822	; 0x822 <_ZN12MQTTSNPacket8sanitiseEv>
     892:	08 95       	ret

00000894 <_ZN4RF243csnEi>:
#define min(a,b) ((a)<(b)?(a):(b))



void RF24::csn(int level)
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
     898:	eb 01       	movw	r28, r22
  // Minimum ideal SPI bus speed is 2x data rate
  // If we assume 2Mbs data rate and 16Mhz clock, a
  // divider of 4 is the minimum we want.
  // CLK:BUS 8Mhz:2Mhz, 16Mhz:4Mhz, or 20Mhz:5Mhz
//every time we address the radio, ensure the SPI settings are correct ( incase something else is using spi)
  SPI::setBitOrder(MSBFIRST);
     89a:	80 e0       	ldi	r24, 0x00	; 0
     89c:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN3SPI11setBitOrderEh>
  SPI::setDataMode(SPI_MODE0);
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0e 94 23 0b 	call	0x1646	; 0x1646 <_ZN3SPI11setDataModeEh>
  SPI::setClockDivider(SPI_CLOCK_DIV4);
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	0e 94 28 0b 	call	0x1650	; 0x1650 <_ZN3SPI15setClockDividerEh>
if (level == HIGH)
     8ac:	21 97       	sbiw	r28, 0x01	; 1
     8ae:	11 f4       	brne	.+4      	; 0x8b4 <_ZN4RF243csnEi+0x20>
{
	PORTB |=(1<<CSN);
     8b0:	2a 9a       	sbi	0x05, 2	; 5
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <_ZN4RF243csnEi+0x22>
}
else
{
	PORTB &= ~(1<<CSN);
     8b4:	2a 98       	cbi	0x05, 2	; 5
}


 // digitalWrite(csn_pin,mode);
  
}
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <_ZN4RF2413read_registerEhPhh>:
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg, uint8_t* buf, uint8_t len)
{
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	8c 01       	movw	r16, r24
     8ce:	c6 2f       	mov	r28, r22
     8d0:	c4 2e       	mov	r12, r20
     8d2:	d5 2e       	mov	r13, r21
     8d4:	f2 2e       	mov	r15, r18
  uint8_t status;

  csn(LOW);
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
     8de:	8c 2f       	mov	r24, r28
     8e0:	8f 71       	andi	r24, 0x1F	; 31
     8e2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     8e6:	e8 2e       	mov	r14, r24
  while ( len-- )
     8e8:	ff 20       	and	r15, r15
     8ea:	41 f0       	breq	.+16     	; 0x8fc <_ZN4RF2413read_registerEhPhh+0x40>
     8ec:	cc 2d       	mov	r28, r12
     8ee:	dd 2d       	mov	r29, r13
    *buf++ = SPI::transfer(0xff);
     8f0:	8f ef       	ldi	r24, 0xFF	; 255
     8f2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     8f6:	89 93       	st	Y+, r24
     8f8:	fa 94       	dec	r15
{
  uint8_t status;

  csn(LOW);
  status = SPI::transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
  while ( len-- )
     8fa:	d1 f7       	brne	.-12     	; 0x8f0 <_ZN4RF2413read_registerEhPhh+0x34>
    *buf++ = SPI::transfer(0xff);

  csn(HIGH);
     8fc:	61 e0       	ldi	r22, 0x01	; 1
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	c8 01       	movw	r24, r16
     902:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     906:	8e 2d       	mov	r24, r14
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	1f 91       	pop	r17
     90e:	0f 91       	pop	r16
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	08 95       	ret

0000091a <_ZN4RF2413read_registerEh>:

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
{
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	ec 01       	movw	r28, r24
     922:	16 2f       	mov	r17, r22
  csn(LOW);
     924:	60 e0       	ldi	r22, 0x00	; 0
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  SPI::transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
     92c:	81 2f       	mov	r24, r17
     92e:	8f 71       	andi	r24, 0x1F	; 31
     930:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
  uint8_t result = SPI::transfer(0xff);
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     93a:	18 2f       	mov	r17, r24

  csn(HIGH);
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	ce 01       	movw	r24, r28
     942:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  return result;
}
     946:	81 2f       	mov	r24, r17
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	1f 91       	pop	r17
     94e:	08 95       	ret

00000950 <_ZN4RF2414write_registerEhPKhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
{
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	8c 01       	movw	r16, r24
     962:	c6 2f       	mov	r28, r22
     964:	c4 2e       	mov	r12, r20
     966:	d5 2e       	mov	r13, r21
     968:	f2 2e       	mov	r15, r18
  uint8_t status;

  csn(LOW);
     96a:	60 e0       	ldi	r22, 0x00	; 0
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     972:	8c 2f       	mov	r24, r28
     974:	8f 71       	andi	r24, 0x1F	; 31
     976:	80 62       	ori	r24, 0x20	; 32
     978:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     97c:	e8 2e       	mov	r14, r24
  while ( len-- )
     97e:	ff 20       	and	r15, r15
     980:	39 f0       	breq	.+14     	; 0x990 <_ZN4RF2414write_registerEhPKhh+0x40>
     982:	cc 2d       	mov	r28, r12
     984:	dd 2d       	mov	r29, r13
    SPI::transfer(*buf++);
     986:	89 91       	ld	r24, Y+
     988:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     98c:	fa 94       	dec	r15
{
  uint8_t status;

  csn(LOW);
  status = SPI::transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
  while ( len-- )
     98e:	d9 f7       	brne	.-10     	; 0x986 <_ZN4RF2414write_registerEhPKhh+0x36>
    SPI::transfer(*buf++);

  csn(HIGH);
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	c8 01       	movw	r24, r16
     996:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     99a:	8e 2d       	mov	r24, r14
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	cf 90       	pop	r12
     9ac:	08 95       	ret

000009ae <_ZN4RF2414write_registerEhh>:

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
{
     9ae:	0f 93       	push	r16
     9b0:	1f 93       	push	r17
     9b2:	cf 93       	push	r28
     9b4:	df 93       	push	r29
     9b6:	ec 01       	movw	r28, r24
     9b8:	16 2f       	mov	r17, r22
     9ba:	04 2f       	mov	r16, r20
  uint8_t status;

  IF_SERIAL_DEBUG(printf_P(PSTR("write_register(%02x,%02x)\r\n"),reg,value));

  csn(LOW);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     9c4:	81 2f       	mov	r24, r17
     9c6:	8f 71       	andi	r24, 0x1F	; 31
     9c8:	80 62       	ori	r24, 0x20	; 32
     9ca:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     9ce:	18 2f       	mov	r17, r24
  SPI::transfer(value);
     9d0:	80 2f       	mov	r24, r16
     9d2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
  csn(HIGH);
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	ce 01       	movw	r24, r28
     9dc:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     9e0:	81 2f       	mov	r24, r17
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <_ZN4RF2413write_payloadEPKvh>:

/****************************************************************************/

uint8_t RF24::write_payload(const void* buf, uint8_t len)
{
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	8c 01       	movw	r16, r24
     a00:	b6 2e       	mov	r11, r22
     a02:	c7 2e       	mov	r12, r23
  uint8_t status;

  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

  uint8_t data_len = min(len,payload_size);
     a04:	fc 01       	movw	r30, r24
     a06:	c2 81       	ldd	r28, Z+2	; 0x02
     a08:	f4 2e       	mov	r15, r20
     a0a:	c4 17       	cp	r28, r20
     a0c:	08 f4       	brcc	.+2      	; 0xa10 <_ZN4RF2413write_payloadEPKvh+0x24>
     a0e:	fc 2e       	mov	r15, r28
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     a10:	f8 01       	movw	r30, r16
     a12:	84 81       	ldd	r24, Z+4	; 0x04
     a14:	81 11       	cpse	r24, r1
     a16:	03 c0       	rjmp	.+6      	; 0xa1e <_ZN4RF2413write_payloadEPKvh+0x32>
     a18:	ec 2e       	mov	r14, r28
     a1a:	ef 18       	sub	r14, r15
     a1c:	01 c0       	rjmp	.+2      	; 0xa20 <_ZN4RF2413write_payloadEPKvh+0x34>
     a1e:	e1 2c       	mov	r14, r1
  
  //printf("[Writing %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	70 e0       	ldi	r23, 0x00	; 0
     a24:	c8 01       	movw	r24, r16
     a26:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( W_TX_PAYLOAD );
     a2a:	80 ea       	ldi	r24, 0xA0	; 160
     a2c:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     a30:	d8 2e       	mov	r13, r24
  while ( data_len-- )
     a32:	ff 20       	and	r15, r15
     a34:	39 f0       	breq	.+14     	; 0xa44 <_ZN4RF2413write_payloadEPKvh+0x58>
     a36:	cb 2d       	mov	r28, r11
     a38:	dc 2d       	mov	r29, r12
    SPI::transfer(*current++);
     a3a:	89 91       	ld	r24, Y+
     a3c:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     a40:	fa 94       	dec	r15
  
  //printf("[Writing %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI::transfer( W_TX_PAYLOAD );
  while ( data_len-- )
     a42:	d9 f7       	brne	.-10     	; 0xa3a <_ZN4RF2413write_payloadEPKvh+0x4e>
    SPI::transfer(*current++);
  while ( blank_len-- )
     a44:	ee 20       	and	r14, r14
     a46:	31 f0       	breq	.+12     	; 0xa54 <_ZN4RF2413write_payloadEPKvh+0x68>
     a48:	ce 2d       	mov	r28, r14
    SPI::transfer(0);
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     a50:	c1 50       	subi	r28, 0x01	; 1
  
  csn(LOW);
  status = SPI::transfer( W_TX_PAYLOAD );
  while ( data_len-- )
    SPI::transfer(*current++);
  while ( blank_len-- )
     a52:	d9 f7       	brne	.-10     	; 0xa4a <_ZN4RF2413write_payloadEPKvh+0x5e>
    SPI::transfer(0);
  csn(HIGH);
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     a5e:	8d 2d       	mov	r24, r13
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	08 95       	ret

00000a74 <_ZN4RF2412read_payloadEPvh>:

/****************************************************************************/

uint8_t RF24::read_payload(void* buf, uint8_t len)
{
     a74:	bf 92       	push	r11
     a76:	cf 92       	push	r12
     a78:	df 92       	push	r13
     a7a:	ef 92       	push	r14
     a7c:	ff 92       	push	r15
     a7e:	0f 93       	push	r16
     a80:	1f 93       	push	r17
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	8c 01       	movw	r16, r24
     a88:	b6 2e       	mov	r11, r22
     a8a:	c7 2e       	mov	r12, r23
  uint8_t status;
  uint8_t* current = reinterpret_cast<uint8_t*>(buf);

  uint8_t data_len = min(len,payload_size);
     a8c:	fc 01       	movw	r30, r24
     a8e:	c2 81       	ldd	r28, Z+2	; 0x02
     a90:	f4 2e       	mov	r15, r20
     a92:	c4 17       	cp	r28, r20
     a94:	08 f4       	brcc	.+2      	; 0xa98 <_ZN4RF2412read_payloadEPvh+0x24>
     a96:	fc 2e       	mov	r15, r28
  uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
     a98:	f8 01       	movw	r30, r16
     a9a:	84 81       	ldd	r24, Z+4	; 0x04
     a9c:	81 11       	cpse	r24, r1
     a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <_ZN4RF2412read_payloadEPvh+0x32>
     aa0:	ec 2e       	mov	r14, r28
     aa2:	ef 18       	sub	r14, r15
     aa4:	01 c0       	rjmp	.+2      	; 0xaa8 <_ZN4RF2412read_payloadEPvh+0x34>
     aa6:	e1 2c       	mov	r14, r1
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	c8 01       	movw	r24, r16
     aae:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( R_RX_PAYLOAD );
     ab2:	81 e6       	ldi	r24, 0x61	; 97
     ab4:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     ab8:	d8 2e       	mov	r13, r24
  while ( data_len-- )
     aba:	ff 20       	and	r15, r15
     abc:	41 f0       	breq	.+16     	; 0xace <_ZN4RF2412read_payloadEPvh+0x5a>
     abe:	cb 2d       	mov	r28, r11
     ac0:	dc 2d       	mov	r29, r12
    *current++ = SPI::transfer(0xff);
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     ac8:	89 93       	st	Y+, r24
     aca:	fa 94       	dec	r15
  
  //printf("[Reading %u bytes %u blanks]",data_len,blank_len);
  
  csn(LOW);
  status = SPI::transfer( R_RX_PAYLOAD );
  while ( data_len-- )
     acc:	d1 f7       	brne	.-12     	; 0xac2 <_ZN4RF2412read_payloadEPvh+0x4e>
    *current++ = SPI::transfer(0xff);
  while ( blank_len-- )
     ace:	ee 20       	and	r14, r14
     ad0:	31 f0       	breq	.+12     	; 0xade <_ZN4RF2412read_payloadEPvh+0x6a>
     ad2:	ce 2d       	mov	r28, r14
    SPI::transfer(0xff);
     ad4:	8f ef       	ldi	r24, 0xFF	; 255
     ad6:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     ada:	c1 50       	subi	r28, 0x01	; 1
  
  csn(LOW);
  status = SPI::transfer( R_RX_PAYLOAD );
  while ( data_len-- )
    *current++ = SPI::transfer(0xff);
  while ( blank_len-- )
     adc:	d9 f7       	brne	.-10     	; 0xad4 <_ZN4RF2412read_payloadEPvh+0x60>
    SPI::transfer(0xff);
  csn(HIGH);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	70 e0       	ldi	r23, 0x00	; 0
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     ae8:	8d 2d       	mov	r24, r13
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	df 90       	pop	r13
     af8:	cf 90       	pop	r12
     afa:	bf 90       	pop	r11
     afc:	08 95       	ret

00000afe <_ZN4RF248flush_rxEv>:

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( FLUSH_RX );
     b0e:	82 ee       	ldi	r24, 0xE2	; 226
     b10:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     b14:	18 2f       	mov	r17, r24
  csn(HIGH);
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	ce 01       	movw	r24, r28
     b1c:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     b20:	81 2f       	mov	r24, r17
     b22:	df 91       	pop	r29
     b24:	cf 91       	pop	r28
     b26:	1f 91       	pop	r17
     b28:	08 95       	ret

00000b2a <_ZN4RF248flush_txEv>:

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( FLUSH_TX );
     b3a:	81 ee       	ldi	r24, 0xE1	; 225
     b3c:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     b40:	18 2f       	mov	r17, r24
  csn(HIGH);
     b42:	61 e0       	ldi	r22, 0x01	; 1
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	ce 01       	movw	r24, r28
     b48:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     b4c:	81 2f       	mov	r24, r17
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	08 95       	ret

00000b56 <_ZN4RF2410get_statusEv>:

/****************************************************************************/

uint8_t RF24::get_status(void)
{
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	ec 01       	movw	r28, r24
  uint8_t status;

  csn(LOW);
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  status = SPI::transfer( NOP );
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     b6c:	18 2f       	mov	r17, r24
  csn(HIGH);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	ce 01       	movw	r24, r28
     b74:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return status;
}
     b78:	81 2f       	mov	r24, r17
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	08 95       	ret

00000b82 <_ZN4RF2412print_statusEh>:
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
           status,
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & 0b111),
     b82:	86 2f       	mov	r24, r22
     b84:	90 e0       	ldi	r25, 0x00	; 0
           (status & _BV(TX_FULL))?1:0
          );
     b86:	26 2f       	mov	r18, r22
     b88:	21 70       	andi	r18, 0x01	; 1
     b8a:	1f 92       	push	r1
     b8c:	2f 93       	push	r18
  printf_P(PSTR("STATUS\t\t = 0x%02x RX_DR=%x TX_DS=%x MAX_RT=%x RX_P_NO=%x TX_FULL=%x\r\n"),
           status,
           (status & _BV(RX_DR))?1:0,
           (status & _BV(TX_DS))?1:0,
           (status & _BV(MAX_RT))?1:0,
           ((status >> RX_P_NO) & 0b111),
     b8e:	95 95       	asr	r25
     b90:	87 95       	ror	r24
           (status & _BV(TX_FULL))?1:0
          );
     b92:	87 70       	andi	r24, 0x07	; 7
     b94:	99 27       	eor	r25, r25
     b96:	9f 93       	push	r25
     b98:	8f 93       	push	r24
     b9a:	64 fb       	bst	r22, 4
     b9c:	88 27       	eor	r24, r24
     b9e:	80 f9       	bld	r24, 0
     ba0:	1f 92       	push	r1
     ba2:	8f 93       	push	r24
     ba4:	65 fb       	bst	r22, 5
     ba6:	88 27       	eor	r24, r24
     ba8:	80 f9       	bld	r24, 0
     baa:	1f 92       	push	r1
     bac:	8f 93       	push	r24
     bae:	66 fb       	bst	r22, 6
     bb0:	88 27       	eor	r24, r24
     bb2:	80 f9       	bld	r24, 0
     bb4:	1f 92       	push	r1
     bb6:	8f 93       	push	r24
     bb8:	1f 92       	push	r1
     bba:	6f 93       	push	r22
     bbc:	85 e3       	ldi	r24, 0x35	; 53
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
     bc8:	8d b7       	in	r24, 0x3d	; 61
     bca:	9e b7       	in	r25, 0x3e	; 62
     bcc:	0e 96       	adiw	r24, 0x0e	; 14
     bce:	0f b6       	in	r0, 0x3f	; 63
     bd0:	f8 94       	cli
     bd2:	9e bf       	out	0x3e, r25	; 62
     bd4:	0f be       	out	0x3f, r0	; 63
     bd6:	8d bf       	out	0x3d, r24	; 61
     bd8:	08 95       	ret

00000bda <_ZN4RF2419print_byte_registerEPKchh>:
}

/****************************************************************************/

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
     bda:	df 92       	push	r13
     bdc:	ef 92       	push	r14
     bde:	ff 92       	push	r15
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	8c 01       	movw	r16, r24
     bea:	c6 2f       	mov	r28, r22
     bec:	d7 2f       	mov	r29, r23
     bee:	e4 2e       	mov	r14, r20
     bf0:	f2 2e       	mov	r15, r18


__attribute__((__always_inline__)) static inline size_t strlen_P(const char * s);
static inline size_t strlen_P(const char *s) {
  return __builtin_constant_p(__builtin_strlen(s))
     ? __builtin_strlen(s) : __strlen_P(s);
     bf2:	86 2f       	mov	r24, r22
     bf4:	97 2f       	mov	r25, r23
     bf6:	0e 94 8f 0c 	call	0x191e	; 0x191e <__strlen_P>
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
     bfa:	08 97       	sbiw	r24, 0x08	; 8
     bfc:	10 f4       	brcc	.+4      	; 0xc02 <_ZN4RF2419print_byte_registerEPKchh+0x28>
     bfe:	89 e0       	ldi	r24, 0x09	; 9
     c00:	01 c0       	rjmp	.+2      	; 0xc04 <_ZN4RF2419print_byte_registerEPKchh+0x2a>
     c02:	80 e0       	ldi	r24, 0x00	; 0
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
     c04:	1f 92       	push	r1
     c06:	8f 93       	push	r24
     c08:	df 93       	push	r29
     c0a:	cf 93       	push	r28
     c0c:	8d e2       	ldi	r24, 0x2D	; 45
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	9f 93       	push	r25
     c12:	8f 93       	push	r24
     c14:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
  while (qty--)
     c18:	0f 90       	pop	r0
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	0f 90       	pop	r0
     c24:	ff 20       	and	r15, r15
     c26:	b9 f0       	breq	.+46     	; 0xc56 <_ZN4RF2419print_byte_registerEPKchh+0x7c>
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
     c28:	c5 e2       	ldi	r28, 0x25	; 37
     c2a:	d1 e0       	ldi	r29, 0x01	; 1
     c2c:	dd 24       	eor	r13, r13
     c2e:	d3 94       	inc	r13
     c30:	de 0c       	add	r13, r14
     c32:	6e 2d       	mov	r22, r14
     c34:	c8 01       	movw	r24, r16
     c36:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
     c3a:	1f 92       	push	r1
     c3c:	8f 93       	push	r24
     c3e:	df 93       	push	r29
     c40:	cf 93       	push	r28
     c42:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
     c46:	fa 94       	dec	r15

void RF24::print_byte_register(const char* name, uint8_t reg, uint8_t qty)
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
  while (qty--)
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	11 f0       	breq	.+4      	; 0xc56 <_ZN4RF2419print_byte_registerEPKchh+0x7c>
    printf_P(PSTR(" 0x%02x"),read_register(reg++));
     c52:	ed 2c       	mov	r14, r13
     c54:	eb cf       	rjmp	.-42     	; 0xc2c <_ZN4RF2419print_byte_registerEPKchh+0x52>
  printf_P(PSTR("\r\n"));
     c56:	82 e2       	ldi	r24, 0x22	; 34
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	9f 93       	push	r25
     c5c:	8f 93       	push	r24
     c5e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	08 95       	ret

00000c76 <_ZN4RF2422print_address_registerEPKchh>:

/****************************************************************************/

void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
     c76:	4f 92       	push	r4
     c78:	5f 92       	push	r5
     c7a:	6f 92       	push	r6
     c7c:	7f 92       	push	r7
     c7e:	8f 92       	push	r8
     c80:	9f 92       	push	r9
     c82:	af 92       	push	r10
     c84:	bf 92       	push	r11
     c86:	cf 92       	push	r12
     c88:	df 92       	push	r13
     c8a:	ef 92       	push	r14
     c8c:	ff 92       	push	r15
     c8e:	0f 93       	push	r16
     c90:	1f 93       	push	r17
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
     c96:	00 d0       	rcall	.+0      	; 0xc98 <_ZN4RF2422print_address_registerEPKchh+0x22>
     c98:	00 d0       	rcall	.+0      	; 0xc9a <_ZN4RF2422print_address_registerEPKchh+0x24>
     c9a:	1f 92       	push	r1
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	4c 01       	movw	r8, r24
     ca2:	06 2f       	mov	r16, r22
     ca4:	f7 2e       	mov	r15, r23
     ca6:	14 2f       	mov	r17, r20
     ca8:	52 2e       	mov	r5, r18
     caa:	86 2f       	mov	r24, r22
     cac:	97 2f       	mov	r25, r23
     cae:	0e 94 8f 0c 	call	0x191e	; 0x191e <__strlen_P>
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
     cb2:	08 97       	sbiw	r24, 0x08	; 8
     cb4:	10 f4       	brcc	.+4      	; 0xcba <_ZN4RF2422print_address_registerEPKchh+0x44>
     cb6:	89 e0       	ldi	r24, 0x09	; 9
     cb8:	01 c0       	rjmp	.+2      	; 0xcbc <_ZN4RF2422print_address_registerEPKchh+0x46>
     cba:	80 e0       	ldi	r24, 0x00	; 0
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);
     cbc:	1f 92       	push	r1
     cbe:	8f 93       	push	r24
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	8a e1       	ldi	r24, 0x1A	; 26
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>

  while (qty--)
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	55 20       	and	r5, r5
     cde:	b1 f1       	breq	.+108    	; 0xd4c <_ZN4RF2422print_address_registerEPKchh+0xd6>
  {
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	5c 01       	movw	r10, r24

    printf_P(PSTR(" 0x"));
     ce6:	0f 2e       	mov	r0, r31
     ce8:	f6 e1       	ldi	r31, 0x16	; 22
     cea:	6f 2e       	mov	r6, r31
     cec:	f1 e0       	ldi	r31, 0x01	; 1
     cee:	7f 2e       	mov	r7, r31
     cf0:	f0 2d       	mov	r31, r0
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
     cf2:	0f 2e       	mov	r0, r31
     cf4:	f1 e1       	ldi	r31, 0x11	; 17
     cf6:	ef 2e       	mov	r14, r31
     cf8:	f1 e0       	ldi	r31, 0x01	; 1
     cfa:	ff 2e       	mov	r15, r31
     cfc:	f0 2d       	mov	r31, r0
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);

  while (qty--)
  {
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);
     cfe:	44 24       	eor	r4, r4
     d00:	43 94       	inc	r4
     d02:	41 0e       	add	r4, r17
     d04:	25 e0       	ldi	r18, 0x05	; 5
     d06:	a5 01       	movw	r20, r10
     d08:	61 2f       	mov	r22, r17
     d0a:	c4 01       	movw	r24, r8
     d0c:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN4RF2413read_registerEhPhh>

    printf_P(PSTR(" 0x"));
     d10:	7f 92       	push	r7
     d12:	6f 92       	push	r6
     d14:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
     d18:	8e 01       	movw	r16, r28
     d1a:	0a 5f       	subi	r16, 0xFA	; 250
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	65 01       	movw	r12, r10
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
     d24:	f8 01       	movw	r30, r16
     d26:	82 91       	ld	r24, -Z
     d28:	8f 01       	movw	r16, r30
     d2a:	1f 92       	push	r1
     d2c:	8f 93       	push	r24
     d2e:	ff 92       	push	r15
     d30:	ef 92       	push	r14
     d32:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);

    printf_P(PSTR(" 0x"));
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
     d36:	0f 90       	pop	r0
     d38:	0f 90       	pop	r0
     d3a:	0f 90       	pop	r0
     d3c:	0f 90       	pop	r0
     d3e:	0c 15       	cp	r16, r12
     d40:	1d 05       	cpc	r17, r13
     d42:	81 f7       	brne	.-32     	; 0xd24 <_ZN4RF2422print_address_registerEPKchh+0xae>
     d44:	5a 94       	dec	r5
void RF24::print_address_register(const char* name, uint8_t reg, uint8_t qty)
{
  char extra_tab = strlen_P(name) < 8 ? '\t' : 0;
  printf_P(PSTR(PRIPSTR"\t%c ="),name,extra_tab);

  while (qty--)
     d46:	11 f0       	breq	.+4      	; 0xd4c <_ZN4RF2422print_address_registerEPKchh+0xd6>
  {
    uint8_t buffer[5];
    read_register(reg++,buffer,sizeof buffer);
     d48:	14 2d       	mov	r17, r4
     d4a:	d9 cf       	rjmp	.-78     	; 0xcfe <_ZN4RF2422print_address_registerEPKchh+0x88>
    uint8_t* bufptr = buffer + sizeof buffer;
    while( --bufptr >= buffer )
      printf_P(PSTR("%02x"),*bufptr);
  }

  printf_P(PSTR("\r\n"));
     d4c:	8e e0       	ldi	r24, 0x0E	; 14
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	9f 93       	push	r25
     d52:	8f 93       	push	r24
     d54:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
}
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	0f 90       	pop	r0
     d64:	0f 90       	pop	r0
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	ff 90       	pop	r15
     d70:	ef 90       	pop	r14
     d72:	df 90       	pop	r13
     d74:	cf 90       	pop	r12
     d76:	bf 90       	pop	r11
     d78:	af 90       	pop	r10
     d7a:	9f 90       	pop	r9
     d7c:	8f 90       	pop	r8
     d7e:	7f 90       	pop	r7
     d80:	6f 90       	pop	r6
     d82:	5f 90       	pop	r5
     d84:	4f 90       	pop	r4
     d86:	08 95       	ret

00000d88 <_ZN4RF24C1Ev>:

/****************************************************************************/

RF24::RF24(): wide_band(true), p_variant(false), 
     d88:	fc 01       	movw	r30, r24
  payload_size(32), ack_payload_available(false), dynamic_payloads_enabled(false),
  pipe0_reading_address(0)
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
     d8e:	11 82       	std	Z+1, r1	; 0x01
     d90:	80 e2       	ldi	r24, 0x20	; 32
     d92:	82 83       	std	Z+2, r24	; 0x02
     d94:	13 82       	std	Z+3, r1	; 0x03
     d96:	14 82       	std	Z+4, r1	; 0x04
     d98:	16 82       	std	Z+6, r1	; 0x06
     d9a:	17 82       	std	Z+7, r1	; 0x07
     d9c:	10 86       	std	Z+8, r1	; 0x08
     d9e:	11 86       	std	Z+9, r1	; 0x09
     da0:	12 86       	std	Z+10, r1	; 0x0a
     da2:	13 86       	std	Z+11, r1	; 0x0b
     da4:	14 86       	std	Z+12, r1	; 0x0c
     da6:	15 86       	std	Z+13, r1	; 0x0d
     da8:	08 95       	ret

00000daa <_ZN4RF2410setChannelEh>:
}

/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
     daa:	46 2f       	mov	r20, r22
  // TODO: This method could take advantage of the 'wide_band' calculation
  // done in setChannel() to require certain channel spacing.

  const uint8_t max_channel = 127;
  write_register(RF_CH,min(channel,max_channel));
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	08 f0       	brcs	.+2      	; 0xdb2 <_ZN4RF2410setChannelEh+0x8>
     db0:	4f e7       	ldi	r20, 0x7F	; 127
     db2:	65 e0       	ldi	r22, 0x05	; 5
     db4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
     db8:	08 95       	ret

00000dba <_ZN4RF2414startListeningEv>:
}

/****************************************************************************/

void RF24::startListening(void)
{
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	ec 01       	movw	r28, r24
  write_register(CONFIG, read_register(CONFIG) | _BV(PWR_UP) | _BV(PRIM_RX));
     dc0:	60 e0       	ldi	r22, 0x00	; 0
     dc2:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
     dc6:	48 2f       	mov	r20, r24
     dc8:	43 60       	ori	r20, 0x03	; 3
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	ce 01       	movw	r24, r28
     dce:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
  write_register(STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     dd2:	40 e7       	ldi	r20, 0x70	; 112
     dd4:	67 e0       	ldi	r22, 0x07	; 7
     dd6:	ce 01       	movw	r24, r28
     dd8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Restore the pipe0 adddress, if exists
  if (pipe0_reading_address)
     ddc:	2e 81       	ldd	r18, Y+6	; 0x06
     dde:	3f 81       	ldd	r19, Y+7	; 0x07
     de0:	48 85       	ldd	r20, Y+8	; 0x08
     de2:	59 85       	ldd	r21, Y+9	; 0x09
     de4:	6a 85       	ldd	r22, Y+10	; 0x0a
     de6:	7b 85       	ldd	r23, Y+11	; 0x0b
     de8:	8c 85       	ldd	r24, Y+12	; 0x0c
     dea:	9d 85       	ldd	r25, Y+13	; 0x0d
     dec:	a0 e0       	ldi	r26, 0x00	; 0
     dee:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__cmpdi2_s8>
     df2:	41 f0       	breq	.+16     	; 0xe04 <_ZN4RF2414startListeningEv+0x4a>
    write_register(RX_ADDR_P0, reinterpret_cast<const uint8_t*>(&pipe0_reading_address), 5);
     df4:	25 e0       	ldi	r18, 0x05	; 5
     df6:	ae 01       	movw	r20, r28
     df8:	4a 5f       	subi	r20, 0xFA	; 250
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	6a e0       	ldi	r22, 0x0A	; 10
     dfe:	ce 01       	movw	r24, r28
     e00:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF2414write_registerEhPKhh>

  // Flush buffers
  flush_rx();
     e04:	ce 01       	movw	r24, r28
     e06:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN4RF248flush_rxEv>
  flush_tx();
     e0a:	ce 01       	movw	r24, r28
     e0c:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN4RF248flush_txEv>

void RF24::ce(int level)
{
	if (level == HIGH)
	{
		PORTB |=(1<<CE);
     e10:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <_ZN4RF2414startListeningEv+0x5c>
     e1a:	00 c0       	rjmp	.+0      	; 0xe1c <_ZN4RF2414startListeningEv+0x62>
     e1c:	00 00       	nop
  // Go!
  ce(HIGH);

  // wait for the radio to come up (130us actually only needed)
  delayMicroseconds(130);
}
     e1e:	df 91       	pop	r29
     e20:	cf 91       	pop	r28
     e22:	08 95       	ret

00000e24 <_ZN4RF2413stopListeningEv>:

/****************************************************************************/

void RF24::stopListening(void)
{
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
     e28:	ec 01       	movw	r28, r24
	{
		PORTB |=(1<<CE);
	}
	else
	{
		PORTB &= ~(1<<CE);
     e2a:	29 98       	cbi	0x05, 1	; 5
/****************************************************************************/

void RF24::stopListening(void)
{
  ce(LOW);
  flush_tx();
     e2c:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN4RF248flush_txEv>
  flush_rx();
     e30:	ce 01       	movw	r24, r28
     e32:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN4RF248flush_rxEv>
}
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <_ZN4RF249powerDownEv>:

/****************************************************************************/

void RF24::powerDown(void)
{
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	ec 01       	movw	r28, r24
  write_register(CONFIG,read_register(CONFIG) & ~_BV(PWR_UP));
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
     e48:	48 2f       	mov	r20, r24
     e4a:	4d 7f       	andi	r20, 0xFD	; 253
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	ce 01       	movw	r24, r28
     e50:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	08 95       	ret

00000e5a <_ZN4RF2410startWriteEPKvh>:
  return result;
}
/****************************************************************************/

void RF24::startWrite( const void* buf, uint8_t len )
{
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	ec 01       	movw	r28, r24
     e66:	8b 01       	movw	r16, r22
     e68:	f4 2e       	mov	r15, r20
  // Transmitter power-up
  write_register(CONFIG, ( read_register(CONFIG) | _BV(PWR_UP) ) & ~_BV(PRIM_RX) );
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
     e70:	8c 7f       	andi	r24, 0xFC	; 252
     e72:	48 2f       	mov	r20, r24
     e74:	42 60       	ori	r20, 0x02	; 2
     e76:	60 e0       	ldi	r22, 0x00	; 0
     e78:	ce 01       	movw	r24, r28
     e7a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
     e7e:	8b e2       	ldi	r24, 0x2B	; 43
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <_ZN4RF2410startWriteEPKvh+0x28>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <_ZN4RF2410startWriteEPKvh+0x2e>
     e88:	00 00       	nop
  delayMicroseconds(150);

  // Send the payload
  write_payload( buf, len );
     e8a:	4f 2d       	mov	r20, r15
     e8c:	b8 01       	movw	r22, r16
     e8e:	ce 01       	movw	r24, r28
     e90:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZN4RF2413write_payloadEPKvh>

void RF24::ce(int level)
{
	if (level == HIGH)
	{
		PORTB |=(1<<CE);
     e94:	29 9a       	sbi	0x05, 1	; 5
     e96:	98 e2       	ldi	r25, 0x28	; 40
     e98:	9a 95       	dec	r25
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <_ZN4RF2410startWriteEPKvh+0x3e>
	}
	else
	{
		PORTB &= ~(1<<CE);
     e9c:	29 98       	cbi	0x05, 1	; 5

  // Allons!
  ce(HIGH);
  delayMicroseconds(15);
  ce(LOW);
}
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	08 95       	ret

00000eaa <_ZN4RF2421getDynamicPayloadSizeEv>:

/****************************************************************************/

uint8_t RF24::getDynamicPayloadSize(void)
{
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
  uint8_t result = 0;

  csn(LOW);
     eb2:	60 e0       	ldi	r22, 0x00	; 0
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  SPI::transfer( R_RX_PL_WID );
     eba:	80 e6       	ldi	r24, 0x60	; 96
     ebc:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
  result = SPI::transfer(0xff);
     ec0:	8f ef       	ldi	r24, 0xFF	; 255
     ec2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
     ec6:	18 2f       	mov	r17, r24
  csn(HIGH);
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	ce 01       	movw	r24, r28
     ece:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>

  return result;
}
     ed2:	81 2f       	mov	r24, r17
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	08 95       	ret

00000edc <_ZN4RF249availableEPh>:
}

/****************************************************************************/

bool RF24::available(uint8_t* pipe_num)
{
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	ec 01       	movw	r28, r24
     eea:	8b 01       	movw	r16, r22
  uint8_t status = get_status();
     eec:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN4RF2410get_statusEv>
     ef0:	f8 2e       	mov	r15, r24
  // Too noisy, enable if you really want lots o data!!
  //IF_SERIAL_DEBUG(print_status(status));

  bool result = ( status & _BV(RX_DR) );

  if (result)
     ef2:	86 fb       	bst	r24, 6
     ef4:	ee 24       	eor	r14, r14
     ef6:	e0 f8       	bld	r14, 0
     ef8:	86 ff       	sbrs	r24, 6
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <_ZN4RF249availableEPh+0x4c>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
     efc:	01 15       	cp	r16, r1
     efe:	11 05       	cpc	r17, r1
     f00:	39 f0       	breq	.+14     	; 0xf10 <_ZN4RF249availableEPh+0x34>
      *pipe_num = ( status >> RX_P_NO ) & 0b111;
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	35 95       	asr	r19
     f08:	27 95       	ror	r18
     f0a:	27 70       	andi	r18, 0x07	; 7
     f0c:	f8 01       	movw	r30, r16
     f0e:	20 83       	st	Z, r18
    // Clear the status bit

    // ??? Should this REALLY be cleared now?  Or wait until we
    // actually READ the payload?

    write_register(STATUS,_BV(RX_DR) );
     f10:	40 e4       	ldi	r20, 0x40	; 64
     f12:	67 e0       	ldi	r22, 0x07	; 7
     f14:	ce 01       	movw	r24, r28
     f16:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

    // Handle ack payload receipt
    if ( status & _BV(TX_DS) )
     f1a:	f5 fe       	sbrs	r15, 5
     f1c:	05 c0       	rjmp	.+10     	; 0xf28 <_ZN4RF249availableEPh+0x4c>
    {
      write_register(STATUS,_BV(TX_DS));
     f1e:	40 e2       	ldi	r20, 0x20	; 32
     f20:	67 e0       	ldi	r22, 0x07	; 7
     f22:	ce 01       	movw	r24, r28
     f24:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
    }
  }

  return result;
}
     f28:	8e 2d       	mov	r24, r14
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	08 95       	ret

00000f38 <_ZN4RF249availableEv>:

/****************************************************************************/

bool RF24::available(void)
{
  return available(NULL);
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	0e 94 6e 07 	call	0xedc	; 0xedc <_ZN4RF249availableEPh>
}
     f40:	08 95       	ret

00000f42 <_ZN4RF244readEPvh>:
}

/****************************************************************************/

bool RF24::read( void* buf, uint8_t len )
{
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	ec 01       	movw	r28, r24
  // Fetch the payload
  read_payload( buf, len );
     f48:	0e 94 3a 05 	call	0xa74	; 0xa74 <_ZN4RF2412read_payloadEPvh>

  // was this the last of the data available?
  return read_register(FIFO_STATUS) & _BV(RX_EMPTY);
     f4c:	67 e1       	ldi	r22, 0x17	; 23
     f4e:	ce 01       	movw	r24, r28
     f50:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
}
     f54:	81 70       	andi	r24, 0x01	; 1
     f56:	df 91       	pop	r29
     f58:	cf 91       	pop	r28
     f5a:	08 95       	ret

00000f5c <_ZN4RF2412whatHappenedERbS0_S0_>:

/****************************************************************************/

void RF24::whatHappened(bool& tx_ok,bool& tx_fail,bool& rx_ready)
{
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	0f 93       	push	r16
     f62:	1f 93       	push	r17
     f64:	cf 93       	push	r28
     f66:	df 93       	push	r29
     f68:	7b 01       	movw	r14, r22
     f6a:	8a 01       	movw	r16, r20
     f6c:	e9 01       	movw	r28, r18
  // Read the status & reset the status in one easy call
  // Or is that such a good idea?
  uint8_t status = write_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
     f6e:	40 e7       	ldi	r20, 0x70	; 112
     f70:	67 e0       	ldi	r22, 0x07	; 7
     f72:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Report to the user what happened
  tx_ok = status & _BV(TX_DS);
     f76:	85 fb       	bst	r24, 5
     f78:	99 27       	eor	r25, r25
     f7a:	90 f9       	bld	r25, 0
     f7c:	f7 01       	movw	r30, r14
     f7e:	90 83       	st	Z, r25
  tx_fail = status & _BV(MAX_RT);
     f80:	84 fb       	bst	r24, 4
     f82:	99 27       	eor	r25, r25
     f84:	90 f9       	bld	r25, 0
     f86:	f8 01       	movw	r30, r16
     f88:	90 83       	st	Z, r25
  rx_ready = status & _BV(RX_DR);
     f8a:	86 fb       	bst	r24, 6
     f8c:	88 27       	eor	r24, r24
     f8e:	80 f9       	bld	r24, 0
     f90:	88 83       	st	Y, r24
}
     f92:	df 91       	pop	r29
     f94:	cf 91       	pop	r28
     f96:	1f 91       	pop	r17
     f98:	0f 91       	pop	r16
     f9a:	ff 90       	pop	r15
     f9c:	ef 90       	pop	r14
     f9e:	08 95       	ret

00000fa0 <_ZN4RF245writeEPKvh>:
}

/******************************************************************/

bool RF24::write( const void* buf, uint8_t len )
{
     fa0:	cf 92       	push	r12
     fa2:	df 92       	push	r13
     fa4:	ef 92       	push	r14
     fa6:	ff 92       	push	r15
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <_ZN4RF245writeEPKvh+0x12>
     fb2:	1f 92       	push	r1
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	8c 01       	movw	r16, r24
  bool result = false;

  // Begin the write
  startWrite(buf,len);
     fba:	0e 94 2d 07 	call	0xe5a	; 0xe5a <_ZN4RF2410startWriteEPKvh>
  // IN the end, the send should be blocking.  It comes back in 60ms worst case, or much faster
  // if I tighted up the retry logic.  (Default settings will be 1500us.
  // Monitor the send
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = Timing::millis();
     fbe:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN6Timing6millisEv>
     fc2:	6b 01       	movw	r12, r22
     fc4:	7c 01       	movw	r14, r24
  const uint32_t timeout = 500; //ms to wait for timeout
  do
  {
    status = read_register(OBSERVE_TX,&observe_tx,1);
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	ae 01       	movw	r20, r28
     fca:	4d 5f       	subi	r20, 0xFD	; 253
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	68 e0       	ldi	r22, 0x08	; 8
     fd0:	c8 01       	movw	r24, r16
     fd2:	0e 94 5e 04 	call	0x8bc	; 0x8bc <_ZN4RF2413read_registerEhPhh>
    IF_SERIAL_DEBUG(Serial.print(observe_tx,HEX));
  }
  while( ! ( status & ( _BV(TX_DS) | _BV(MAX_RT) ) ) && ( Timing::millis() - sent_at < timeout ) );
     fd6:	80 73       	andi	r24, 0x30	; 48
     fd8:	69 f4       	brne	.+26     	; 0xff4 <_ZN4RF245writeEPKvh+0x54>
     fda:	0e 94 37 0b 	call	0x166e	; 0x166e <_ZN6Timing6millisEv>
     fde:	ab 01       	movw	r20, r22
     fe0:	bc 01       	movw	r22, r24
     fe2:	4c 19       	sub	r20, r12
     fe4:	5d 09       	sbc	r21, r13
     fe6:	6e 09       	sbc	r22, r14
     fe8:	7f 09       	sbc	r23, r15
  // Monitor the send
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = Timing::millis();
  const uint32_t timeout = 500; //ms to wait for timeout
  do
     fea:	44 3f       	cpi	r20, 0xF4	; 244
     fec:	51 40       	sbci	r21, 0x01	; 1
     fee:	61 05       	cpc	r22, r1
     ff0:	71 05       	cpc	r23, r1
     ff2:	48 f3       	brcs	.-46     	; 0xfc6 <_ZN4RF245writeEPKvh+0x26>
  // The status tells us three things
  // * The send was successful (TX_DS)
  // * The send failed, too many retries (MAX_RT)
  // * There is an ack packet waiting (RX_DR)
  bool tx_ok, tx_fail;
  whatHappened(tx_ok,tx_fail,ack_payload_available);
     ff4:	98 01       	movw	r18, r16
     ff6:	2d 5f       	subi	r18, 0xFD	; 253
     ff8:	3f 4f       	sbci	r19, 0xFF	; 255
     ffa:	ae 01       	movw	r20, r28
     ffc:	4f 5f       	subi	r20, 0xFF	; 255
     ffe:	5f 4f       	sbci	r21, 0xFF	; 255
    1000:	be 01       	movw	r22, r28
    1002:	6e 5f       	subi	r22, 0xFE	; 254
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	c8 01       	movw	r24, r16
    1008:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN4RF2412whatHappenedERbS0_S0_>
  
  //printf("%u%u%u\r\n",tx_ok,tx_fail,ack_payload_available);

  result = tx_ok;
    100c:	fa 80       	ldd	r15, Y+2	; 0x02
  IF_SERIAL_DEBUG(Serial.print(result?"...OK.":"...Failed"));

  // Handle the ack packet
  if ( ack_payload_available )
    100e:	f8 01       	movw	r30, r16
    1010:	83 81       	ldd	r24, Z+3	; 0x03
    1012:	88 23       	and	r24, r24
    1014:	29 f0       	breq	.+10     	; 0x1020 <_ZN4RF245writeEPKvh+0x80>
  {
    ack_payload_length = getDynamicPayloadSize();
    1016:	c8 01       	movw	r24, r16
    1018:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN4RF2421getDynamicPayloadSizeEv>
    101c:	f8 01       	movw	r30, r16
    101e:	85 83       	std	Z+5, r24	; 0x05
  }

  // Yay, we are done.

  // Power down
  powerDown();
    1020:	c8 01       	movw	r24, r16
    1022:	0e 94 1e 07 	call	0xe3c	; 0xe3c <_ZN4RF249powerDownEv>

  // Flush buffers (Is this a relic of past experimentation, and not needed anymore??)
  flush_tx();
    1026:	c8 01       	movw	r24, r16
    1028:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN4RF248flush_txEv>

  return result;
}
    102c:	8f 2d       	mov	r24, r15
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	df 91       	pop	r29
    1036:	cf 91       	pop	r28
    1038:	1f 91       	pop	r17
    103a:	0f 91       	pop	r16
    103c:	ff 90       	pop	r15
    103e:	ef 90       	pop	r14
    1040:	df 90       	pop	r13
    1042:	cf 90       	pop	r12
    1044:	08 95       	ret

00001046 <_ZN4RF2415openWritingPipeEy>:
}

/****************************************************************************/

void RF24::openWritingPipe(uint64_t value)
{
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	cd b7       	in	r28, 0x3d	; 61
    1054:	de b7       	in	r29, 0x3e	; 62
    1056:	28 97       	sbiw	r28, 0x08	; 8
    1058:	0f b6       	in	r0, 0x3f	; 63
    105a:	f8 94       	cli
    105c:	de bf       	out	0x3e, r29	; 62
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	cd bf       	out	0x3d, r28	; 61
    1062:	7c 01       	movw	r14, r24
    1064:	09 83       	std	Y+1, r16	; 0x01
    1066:	1a 83       	std	Y+2, r17	; 0x02
    1068:	2b 83       	std	Y+3, r18	; 0x03
    106a:	3c 83       	std	Y+4, r19	; 0x04
    106c:	4d 83       	std	Y+5, r20	; 0x05
    106e:	5e 83       	std	Y+6, r21	; 0x06
    1070:	6f 83       	std	Y+7, r22	; 0x07
    1072:	78 87       	std	Y+8, r23	; 0x08
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0, reinterpret_cast<uint8_t*>(&value), 5);
    1074:	25 e0       	ldi	r18, 0x05	; 5
    1076:	ae 01       	movw	r20, r28
    1078:	4f 5f       	subi	r20, 0xFF	; 255
    107a:	5f 4f       	sbci	r21, 0xFF	; 255
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF2414write_registerEhPKhh>
  write_register(TX_ADDR, reinterpret_cast<uint8_t*>(&value), 5);
    1082:	25 e0       	ldi	r18, 0x05	; 5
    1084:	ae 01       	movw	r20, r28
    1086:	4f 5f       	subi	r20, 0xFF	; 255
    1088:	5f 4f       	sbci	r21, 0xFF	; 255
    108a:	60 e1       	ldi	r22, 0x10	; 16
    108c:	c7 01       	movw	r24, r14
    108e:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF2414write_registerEhPKhh>

  const uint8_t max_payload_size = 32;
  write_register(RX_PW_P0,min(payload_size,max_payload_size));
    1092:	f7 01       	movw	r30, r14
    1094:	42 81       	ldd	r20, Z+2	; 0x02
    1096:	41 32       	cpi	r20, 0x21	; 33
    1098:	08 f0       	brcs	.+2      	; 0x109c <_ZN4RF2415openWritingPipeEy+0x56>
    109a:	40 e2       	ldi	r20, 0x20	; 32
    109c:	61 e1       	ldi	r22, 0x11	; 17
    109e:	c7 01       	movw	r24, r14
    10a0:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
}
    10a4:	28 96       	adiw	r28, 0x08	; 8
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	ff 90       	pop	r15
    10ba:	ef 90       	pop	r14
    10bc:	08 95       	ret

000010be <_ZN4RF2415openReadingPipeEhy>:
{
  ERX_P0, ERX_P1, ERX_P2, ERX_P3, ERX_P4, ERX_P5
};

void RF24::openReadingPipe(uint8_t child, uint64_t address)
{
    10be:	bf 92       	push	r11
    10c0:	cf 92       	push	r12
    10c2:	df 92       	push	r13
    10c4:	ef 92       	push	r14
    10c6:	ff 92       	push	r15
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
    10cc:	cf 93       	push	r28
    10ce:	df 93       	push	r29
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
    10d4:	28 97       	sbiw	r28, 0x08	; 8
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	f8 94       	cli
    10da:	de bf       	out	0x3e, r29	; 62
    10dc:	0f be       	out	0x3f, r0	; 63
    10de:	cd bf       	out	0x3d, r28	; 61
    10e0:	6c 01       	movw	r12, r24
    10e2:	b6 2e       	mov	r11, r22
    10e4:	e9 82       	std	Y+1, r14	; 0x01
    10e6:	fa 82       	std	Y+2, r15	; 0x02
    10e8:	0b 83       	std	Y+3, r16	; 0x03
    10ea:	1c 83       	std	Y+4, r17	; 0x04
    10ec:	2d 83       	std	Y+5, r18	; 0x05
    10ee:	3e 83       	std	Y+6, r19	; 0x06
    10f0:	4f 83       	std	Y+7, r20	; 0x07
    10f2:	58 87       	std	Y+8, r21	; 0x08
  // If this is pipe 0, cache the address.  This is needed because
  // openWritingPipe() will overwrite the pipe 0 address, so
  // startListening() will have to restore it.
  if (child == 0)
    10f4:	61 11       	cpse	r22, r1
    10f6:	0a c0       	rjmp	.+20     	; 0x110c <_ZN4RF2415openReadingPipeEhy+0x4e>
    pipe0_reading_address = address;
    10f8:	f6 01       	movw	r30, r12
    10fa:	e6 82       	std	Z+6, r14	; 0x06
    10fc:	f7 82       	std	Z+7, r15	; 0x07
    10fe:	00 87       	std	Z+8, r16	; 0x08
    1100:	11 87       	std	Z+9, r17	; 0x09
    1102:	22 87       	std	Z+10, r18	; 0x0a
    1104:	33 87       	std	Z+11, r19	; 0x0b
    1106:	44 87       	std	Z+12, r20	; 0x0c
    1108:	55 87       	std	Z+13, r21	; 0x0d
    110a:	07 c0       	rjmp	.+14     	; 0x111a <_ZN4RF2415openReadingPipeEhy+0x5c>

  if (child <= 6)
    110c:	f6 e0       	ldi	r31, 0x06	; 6
    110e:	f6 17       	cp	r31, r22
    1110:	08 f4       	brcc	.+2      	; 0x1114 <_ZN4RF2415openReadingPipeEhy+0x56>
    1112:	3c c0       	rjmp	.+120    	; 0x118c <_ZN4RF2415openReadingPipeEhy+0xce>
  {
    // For pipes 2-5, only write the LSB
    if ( child < 2 )
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	6b 15       	cp	r22, r11
    1118:	68 f0       	brcs	.+26     	; 0x1134 <_ZN4RF2415openReadingPipeEhy+0x76>
      write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 5);
    111a:	eb 2d       	mov	r30, r11
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	e9 57       	subi	r30, 0x79	; 121
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	64 91       	lpm	r22, Z
    1124:	25 e0       	ldi	r18, 0x05	; 5
    1126:	ae 01       	movw	r20, r28
    1128:	4f 5f       	subi	r20, 0xFF	; 255
    112a:	5f 4f       	sbci	r21, 0xFF	; 255
    112c:	c6 01       	movw	r24, r12
    112e:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF2414write_registerEhPKhh>
    1132:	0b c0       	rjmp	.+22     	; 0x114a <_ZN4RF2415openReadingPipeEhy+0x8c>
    else
      write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast<const uint8_t*>(&address), 1);
    1134:	eb 2d       	mov	r30, r11
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	e9 57       	subi	r30, 0x79	; 121
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	64 91       	lpm	r22, Z
    113e:	21 e0       	ldi	r18, 0x01	; 1
    1140:	ae 01       	movw	r20, r28
    1142:	4f 5f       	subi	r20, 0xFF	; 255
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	0e 94 a8 04 	call	0x950	; 0x950 <_ZN4RF2414write_registerEhPKhh>

    write_register(pgm_read_byte(&child_payload_size[child]),payload_size);
    114a:	0b 2d       	mov	r16, r11
    114c:	10 e0       	ldi	r17, 0x00	; 0
    114e:	f8 01       	movw	r30, r16
    1150:	ef 57       	subi	r30, 0x7F	; 127
    1152:	fe 4f       	sbci	r31, 0xFE	; 254
    1154:	64 91       	lpm	r22, Z
    1156:	f6 01       	movw	r30, r12
    1158:	42 81       	ldd	r20, Z+2	; 0x02
    115a:	c6 01       	movw	r24, r12
    115c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

    // Note it would be more efficient to set all of the bits for all open
    // pipes at once.  However, I thought it would make the calling code
    // more simple to do it this way.
    write_register(EN_RXADDR,read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
    1160:	62 e0       	ldi	r22, 0x02	; 2
    1162:	c6 01       	movw	r24, r12
    1164:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    1168:	f8 01       	movw	r30, r16
    116a:	e5 58       	subi	r30, 0x85	; 133
    116c:	fe 4f       	sbci	r31, 0xFE	; 254
    116e:	44 91       	lpm	r20, Z
    1170:	21 e0       	ldi	r18, 0x01	; 1
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	b9 01       	movw	r22, r18
    1176:	02 c0       	rjmp	.+4      	; 0x117c <_ZN4RF2415openReadingPipeEhy+0xbe>
    1178:	66 0f       	add	r22, r22
    117a:	77 1f       	adc	r23, r23
    117c:	4a 95       	dec	r20
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <_ZN4RF2415openReadingPipeEhy+0xba>
    1180:	ab 01       	movw	r20, r22
    1182:	48 2b       	or	r20, r24
    1184:	62 e0       	ldi	r22, 0x02	; 2
    1186:	c6 01       	movw	r24, r12
    1188:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
  }
}
    118c:	28 96       	adiw	r28, 0x08	; 8
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	f8 94       	cli
    1192:	de bf       	out	0x3e, r29	; 62
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	cd bf       	out	0x3d, r28	; 61
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	0f 91       	pop	r16
    11a0:	ff 90       	pop	r15
    11a2:	ef 90       	pop	r14
    11a4:	df 90       	pop	r13
    11a6:	cf 90       	pop	r12
    11a8:	bf 90       	pop	r11
    11aa:	08 95       	ret

000011ac <_ZN4RF2415toggle_featuresEv>:

/****************************************************************************/

void RF24::toggle_features(void)
{
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
  csn(LOW);
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	70 e0       	ldi	r23, 0x00	; 0
    11b6:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
  SPI::transfer( ACTIVATE );
    11ba:	80 e5       	ldi	r24, 0x50	; 80
    11bc:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
  SPI::transfer( 0x73 );
    11c0:	83 e7       	ldi	r24, 0x73	; 115
    11c2:	0e 94 13 0b 	call	0x1626	; 0x1626 <_ZN3SPI8transferEh>
  csn(HIGH);
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	ce 01       	movw	r24, r28
    11cc:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	08 95       	ret

000011d6 <_ZN4RF2421enableDynamicPayloadsEv>:

/****************************************************************************/

void RF24::enableDynamicPayloads(void)
{
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
  // Enable dynamic payload throughout the system
  write_register(FEATURE,read_register(FEATURE) | _BV(EN_DPL) );
    11dc:	6d e1       	ldi	r22, 0x1D	; 29
    11de:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    11e2:	48 2f       	mov	r20, r24
    11e4:	44 60       	ori	r20, 0x04	; 4
    11e6:	6d e1       	ldi	r22, 0x1D	; 29
    11e8:	ce 01       	movw	r24, r28
    11ea:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // If it didn't work, the features are not enabled
  if ( ! read_register(FEATURE) )
    11ee:	6d e1       	ldi	r22, 0x1D	; 29
    11f0:	ce 01       	movw	r24, r28
    11f2:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    11f6:	81 11       	cpse	r24, r1
    11f8:	0d c0       	rjmp	.+26     	; 0x1214 <_ZN4RF2421enableDynamicPayloadsEv+0x3e>
  {
    // So enable them and try again
    toggle_features();
    11fa:	ce 01       	movw	r24, r28
    11fc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <_ZN4RF2415toggle_featuresEv>
    write_register(FEATURE,read_register(FEATURE) | _BV(EN_DPL) );
    1200:	6d e1       	ldi	r22, 0x1D	; 29
    1202:	ce 01       	movw	r24, r28
    1204:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    1208:	48 2f       	mov	r20, r24
    120a:	44 60       	ori	r20, 0x04	; 4
    120c:	6d e1       	ldi	r22, 0x1D	; 29
    120e:	ce 01       	movw	r24, r28
    1210:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Enable dynamic payload on all pipes
  //
  // Not sure the use case of only having dynamic payload on certain
  // pipes, so the library does not support it.
  write_register(DYNPD,read_register(DYNPD) | _BV(DPL_P5) | _BV(DPL_P4) | _BV(DPL_P3) | _BV(DPL_P2) | _BV(DPL_P1) | _BV(DPL_P0));
    1214:	6c e1       	ldi	r22, 0x1C	; 28
    1216:	ce 01       	movw	r24, r28
    1218:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    121c:	48 2f       	mov	r20, r24
    121e:	4f 63       	ori	r20, 0x3F	; 63
    1220:	6c e1       	ldi	r22, 0x1C	; 28
    1222:	ce 01       	movw	r24, r28
    1224:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  dynamic_payloads_enabled = true;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	8c 83       	std	Y+4, r24	; 0x04
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>:
}

/****************************************************************************/

void RF24::setPALevel(rf24_pa_dbm_e level)
{
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	ec 01       	movw	r28, r24
    123a:	16 2f       	mov	r17, r22
  uint8_t setup = read_register(RF_SETUP) ;
    123c:	66 e0       	ldi	r22, 0x06	; 6
    123e:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
    1242:	48 2f       	mov	r20, r24
    1244:	49 7f       	andi	r20, 0xF9	; 249

  // switch uses RAM (evil!)
  if ( level == RF24_PA_MAX )
    1246:	13 30       	cpi	r17, 0x03	; 3
    1248:	11 f4       	brne	.+4      	; 0x124e <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x1c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
    124a:	46 60       	ori	r20, 0x06	; 6
    124c:	0b c0       	rjmp	.+22     	; 0x1264 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x32>
  }
  else if ( level == RF24_PA_HIGH )
    124e:	12 30       	cpi	r17, 0x02	; 2
    1250:	11 f4       	brne	.+4      	; 0x1256 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x24>
  {
    setup |= _BV(RF_PWR_HIGH) ;
    1252:	44 60       	ori	r20, 0x04	; 4
    1254:	07 c0       	rjmp	.+14     	; 0x1264 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x32>
  }
  else if ( level == RF24_PA_LOW )
    1256:	11 30       	cpi	r17, 0x01	; 1
    1258:	11 f4       	brne	.+4      	; 0x125e <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x2c>
  {
    setup |= _BV(RF_PWR_LOW);
    125a:	42 60       	ori	r20, 0x02	; 2
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x32>
  }
  else if ( level == RF24_PA_MIN )
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
    125e:	14 30       	cpi	r17, 0x04	; 4
    1260:	09 f4       	brne	.+2      	; 0x1264 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e+0x32>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
    1262:	46 60       	ori	r20, 0x06	; 6
  }

  write_register( RF_SETUP, setup ) ;
    1264:	66 e0       	ldi	r22, 0x06	; 6
    1266:	ce 01       	movw	r24, r28
    1268:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
}
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	08 95       	ret

00001274 <_ZN4RF2410getPALevelEv>:
/****************************************************************************/

rf24_pa_dbm_e RF24::getPALevel(void)
{
  rf24_pa_dbm_e result = RF24_PA_ERROR ;
  uint8_t power = read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
    1274:	66 e0       	ldi	r22, 0x06	; 6
    1276:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    127a:	98 2f       	mov	r25, r24
    127c:	96 70       	andi	r25, 0x06	; 6

  // switch uses RAM (evil!)
  if ( power == (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) )
    127e:	96 30       	cpi	r25, 0x06	; 6
    1280:	39 f0       	breq	.+14     	; 0x1290 <_ZN4RF2410getPALevelEv+0x1c>
  {
    result = RF24_PA_MAX ;
  }
  else if ( power == _BV(RF_PWR_HIGH) )
    1282:	94 30       	cpi	r25, 0x04	; 4
    1284:	39 f0       	breq	.+14     	; 0x1294 <_ZN4RF2410getPALevelEv+0x20>
  {
    result = RF24_PA_HIGH ;
  }
  else if ( power == _BV(RF_PWR_LOW) )
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	92 30       	cpi	r25, 0x02	; 2
    128a:	29 f0       	breq	.+10     	; 0x1296 <_ZN4RF2410getPALevelEv+0x22>
    128c:	80 e0       	ldi	r24, 0x00	; 0
    128e:	08 95       	ret
  uint8_t power = read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;

  // switch uses RAM (evil!)
  if ( power == (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) )
  {
    result = RF24_PA_MAX ;
    1290:	83 e0       	ldi	r24, 0x03	; 3
    1292:	08 95       	ret
  }
  else if ( power == _BV(RF_PWR_HIGH) )
  {
    result = RF24_PA_HIGH ;
    1294:	82 e0       	ldi	r24, 0x02	; 2
  {
    result = RF24_PA_MIN ;
  }

  return result ;
}
    1296:	08 95       	ret

00001298 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
    1298:	0f 93       	push	r16
    129a:	1f 93       	push	r17
    129c:	cf 93       	push	r28
    129e:	df 93       	push	r29
    12a0:	ec 01       	movw	r28, r24
    12a2:	06 2f       	mov	r16, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
    12a4:	66 e0       	ldi	r22, 0x06	; 6
    12a6:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
    12aa:	18 82       	st	Y, r1
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
    12ac:	18 2f       	mov	r17, r24
    12ae:	17 7d       	andi	r17, 0xD7	; 215
  if( speed == RF24_250KBPS )
    12b0:	02 30       	cpi	r16, 0x02	; 2
    12b2:	11 f4       	brne	.+4      	; 0x12b8 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x20>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
    setup |= _BV( RF_DR_LOW ) ;
    12b4:	10 62       	ori	r17, 0x20	; 32
    12b6:	05 c0       	rjmp	.+10     	; 0x12c2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2a>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    12b8:	01 30       	cpi	r16, 0x01	; 1
    12ba:	19 f4       	brne	.+6      	; 0x12c2 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x2a>
    {
      wide_band = true ;
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	88 83       	st	Y, r24
      setup |= _BV(RF_DR_HIGH);
    12c0:	18 60       	ori	r17, 0x08	; 8
    {
      // 1Mbs
      wide_band = false ;
    }
  }
  write_register(RF_SETUP,setup);
    12c2:	41 2f       	mov	r20, r17
    12c4:	66 e0       	ldi	r22, 0x06	; 6
    12c6:	ce 01       	movw	r24, r28
    12c8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
    12cc:	66 e0       	ldi	r22, 0x06	; 6
    12ce:	ce 01       	movw	r24, r28
    12d0:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    12d4:	18 17       	cp	r17, r24
    12d6:	19 f0       	breq	.+6      	; 0x12de <_ZN4RF2411setDataRateE15rf24_datarate_e+0x46>
  {
    result = true;
  }
  else
  {
    wide_band = false;
    12d8:	18 82       	st	Y, r1

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
  bool result = false;
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x48>
  write_register(RF_SETUP,setup);

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
  {
    result = true;
    12de:	81 e0       	ldi	r24, 0x01	; 1
  {
    wide_band = false;
  }

  return result;
}
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	1f 91       	pop	r17
    12e6:	0f 91       	pop	r16
    12e8:	08 95       	ret

000012ea <_ZN4RF2411getDataRateEv>:
/****************************************************************************/

rf24_datarate_e RF24::getDataRate( void )
{
  rf24_datarate_e result ;
  uint8_t dr = read_register(RF_SETUP) & (_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
    12ea:	66 e0       	ldi	r22, 0x06	; 6
    12ec:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    12f0:	98 2f       	mov	r25, r24
    12f2:	98 72       	andi	r25, 0x28	; 40
  
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
    12f4:	90 32       	cpi	r25, 0x20	; 32
    12f6:	29 f0       	breq	.+10     	; 0x1302 <_ZN4RF2411getDataRateEv+0x18>
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
  }
  else if ( dr == _BV(RF_DR_HIGH) )
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	98 30       	cpi	r25, 0x08	; 8
    12fc:	19 f0       	breq	.+6      	; 0x1304 <_ZN4RF2411getDataRateEv+0x1a>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	08 95       	ret
  // switch uses RAM (evil!)
  // Order matters in our case below
  if ( dr == _BV(RF_DR_LOW) )
  {
    // '10' = 250KBPS
    result = RF24_250KBPS ;
    1302:	82 e0       	ldi	r24, 0x02	; 2
  {
    // '00' = 1MBPS
    result = RF24_1MBPS ;
  }
  return result ;
}
    1304:	08 95       	ret

00001306 <_ZN4RF2412setCRCLengthE16rf24_crclength_e>:

/****************************************************************************/

void RF24::setCRCLength(rf24_crclength_e length)
{
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
    130e:	16 2f       	mov	r17, r22
  uint8_t config = read_register(CONFIG) & ~( _BV(CRCO) | _BV(EN_CRC)) ;
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>
    1316:	48 2f       	mov	r20, r24
    1318:	43 7f       	andi	r20, 0xF3	; 243
  
  // switch uses RAM (evil!)
  if ( length == RF24_CRC_DISABLED )
    131a:	11 23       	and	r17, r17
    131c:	29 f0       	breq	.+10     	; 0x1328 <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x22>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
    131e:	11 30       	cpi	r17, 0x01	; 1
    1320:	11 f4       	brne	.+4      	; 0x1326 <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x20>
  {
    config |= _BV(EN_CRC);
    1322:	48 60       	ori	r20, 0x08	; 8
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <_ZN4RF2412setCRCLengthE16rf24_crclength_e+0x22>
  }
  else
  {
    config |= _BV(EN_CRC);
    config |= _BV( CRCO );
    1326:	4c 60       	ori	r20, 0x0C	; 12
  }
  write_register( CONFIG, config ) ;
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	ce 01       	movw	r24, r28
    132c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	08 95       	ret

00001338 <_ZN4RF245beginEv>:
}

/****************************************************************************/

void RF24::begin(void)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
	DDRB |= (1<<CSN)| (1<<CE);
    133e:	84 b1       	in	r24, 0x04	; 4
    1340:	86 60       	ori	r24, 0x06	; 6
    1342:	84 b9       	out	0x04, r24	; 4
  // Initialize pins
 // pinMode(ce_pin,OUTPUT);
 // pinMode(csn_pin,OUTPUT);

  // Initialize SPI bus
  SPI::init();
    1344:	0e 94 0c 0b 	call	0x1618	; 0x1618 <_ZN3SPI4initEv>
	{
		PORTB |=(1<<CE);
	}
	else
	{
		PORTB &= ~(1<<CE);
    1348:	29 98       	cbi	0x05, 1	; 5

  // Initialize SPI bus
  SPI::init();

  ce(LOW);
  csn(HIGH);
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	ce 01       	movw	r24, r28
    1350:	0e 94 4a 04 	call	0x894	; 0x894 <_ZN4RF243csnEi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1354:	8f e0       	ldi	r24, 0x0F	; 15
    1356:	97 e2       	ldi	r25, 0x27	; 39
    1358:	01 97       	sbiw	r24, 0x01	; 1
    135a:	f1 f7       	brne	.-4      	; 0x1358 <_ZN4RF245beginEv+0x20>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <_ZN4RF245beginEv+0x26>
    135e:	00 00       	nop
  delay( 5 ) ;

  // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easier
  // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
  // sizes must never be used. See documentation for a more complete explanation.
  write_register(SETUP_RETR, (0b0100 << ARD) | (0b1111 << ARC));
    1360:	4f e4       	ldi	r20, 0x4F	; 79
    1362:	64 e0       	ldi	r22, 0x04	; 4
    1364:	ce 01       	movw	r24, r28
    1366:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Restore our default PA level
  setPALevel( RF24_PA_MAX ) ;
    136a:	63 e0       	ldi	r22, 0x03	; 3
    136c:	ce 01       	movw	r24, r28
    136e:	0e 94 19 09 	call	0x1232	; 0x1232 <_ZN4RF2410setPALevelE13rf24_pa_dbm_e>

  // Determine if this is a p or non-p RF24 module and then
  // reset our data rate back to default value. This works
  // because a non-P variant won't allow the data rate to
  // be set to 250Kbps.
  if( setDataRate( RF24_250KBPS ) )
    1372:	62 e0       	ldi	r22, 0x02	; 2
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    137a:	88 23       	and	r24, r24
    137c:	11 f0       	breq	.+4      	; 0x1382 <_ZN4RF245beginEv+0x4a>
  {
    p_variant = true ;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
  }
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	ce 01       	movw	r24, r28
    1386:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  setCRCLength( RF24_CRC_16 ) ;
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	ce 01       	movw	r24, r28
    138e:	0e 94 83 09 	call	0x1306	; 0x1306 <_ZN4RF2412setCRCLengthE16rf24_crclength_e>
  
  // Disable dynamic payloads, to match dynamic_payloads_enabled setting
  write_register(DYNPD,0);
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	6c e1       	ldi	r22, 0x1C	; 28
    1396:	ce 01       	movw	r24, r28
    1398:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    139c:	40 e7       	ldi	r20, 0x70	; 112
    139e:	67 e0       	ldi	r22, 0x07	; 7
    13a0:	ce 01       	movw	r24, r28
    13a2:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
    13a6:	6c e4       	ldi	r22, 0x4C	; 76
    13a8:	ce 01       	movw	r24, r28
    13aa:	0e 94 d5 06 	call	0xdaa	; 0xdaa <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 7f 05 	call	0xafe	; 0xafe <_ZN4RF248flush_rxEv>
  flush_tx();
    13b4:	ce 01       	movw	r24, r28
    13b6:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN4RF248flush_txEv>
}
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	08 95       	ret

000013c0 <_ZN4RF2412getCRCLengthEv>:
/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
  uint8_t config = read_register(CONFIG) & ( _BV(CRCO) | _BV(EN_CRC)) ;
    13c0:	60 e0       	ldi	r22, 0x00	; 0
    13c2:	0e 94 8d 04 	call	0x91a	; 0x91a <_ZN4RF2413read_registerEh>

  if ( config & _BV(EN_CRC ) )
    13c6:	83 ff       	sbrs	r24, 3
    13c8:	04 c0       	rjmp	.+8      	; 0x13d2 <_ZN4RF2412getCRCLengthEv+0x12>
  {
    if ( config & _BV(CRCO) )
    13ca:	82 ff       	sbrs	r24, 2
    13cc:	04 c0       	rjmp	.+8      	; 0x13d6 <_ZN4RF2412getCRCLengthEv+0x16>
      result = RF24_CRC_16;
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	08 95       	ret

/****************************************************************************/

rf24_crclength_e RF24::getCRCLength(void)
{
  rf24_crclength_e result = RF24_CRC_DISABLED;
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	08 95       	ret
  if ( config & _BV(EN_CRC ) )
  {
    if ( config & _BV(CRCO) )
      result = RF24_CRC_16;
    else
      result = RF24_CRC_8;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
  }

  return result;
}
    13d8:	08 95       	ret

000013da <_ZN4RF2412printDetailsEv>:
  rf24_pa_dbm_e_str_2,
  rf24_pa_dbm_e_str_3,
};

void RF24::printDetails(void)
{
    13da:	cf 93       	push	r28
    13dc:	df 93       	push	r29
    13de:	ec 01       	movw	r28, r24
  print_status(get_status());
    13e0:	0e 94 ab 05 	call	0xb56	; 0xb56 <_ZN4RF2410get_statusEv>
    13e4:	68 2f       	mov	r22, r24
    13e6:	ce 01       	movw	r24, r28
    13e8:	0e 94 c1 05 	call	0xb82	; 0xb82 <_ZN4RF2412print_statusEh>

  print_address_register(PSTR("RX_ADDR_P0-1"),RX_ADDR_P0,2);
    13ec:	22 e0       	ldi	r18, 0x02	; 2
    13ee:	4a e0       	ldi	r20, 0x0A	; 10
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	71 e0       	ldi	r23, 0x01	; 1
    13f4:	ce 01       	movw	r24, r28
    13f6:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN4RF2422print_address_registerEPKchh>
  print_byte_register(PSTR("RX_ADDR_P2-5"),RX_ADDR_P2,4);
    13fa:	24 e0       	ldi	r18, 0x04	; 4
    13fc:	4c e0       	ldi	r20, 0x0C	; 12
    13fe:	64 ef       	ldi	r22, 0xF4	; 244
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	ce 01       	movw	r24, r28
    1404:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_address_register(PSTR("TX_ADDR"),TX_ADDR);
    1408:	21 e0       	ldi	r18, 0x01	; 1
    140a:	40 e1       	ldi	r20, 0x10	; 16
    140c:	6c ee       	ldi	r22, 0xEC	; 236
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	ce 01       	movw	r24, r28
    1412:	0e 94 3b 06 	call	0xc76	; 0xc76 <_ZN4RF2422print_address_registerEPKchh>

  print_byte_register(PSTR("RX_PW_P0-6"),RX_PW_P0,6);
    1416:	26 e0       	ldi	r18, 0x06	; 6
    1418:	41 e1       	ldi	r20, 0x11	; 17
    141a:	61 ee       	ldi	r22, 0xE1	; 225
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	ce 01       	movw	r24, r28
    1420:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("EN_AA"),EN_AA);
    1424:	21 e0       	ldi	r18, 0x01	; 1
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	6b ed       	ldi	r22, 0xDB	; 219
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	ce 01       	movw	r24, r28
    142e:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("EN_RXADDR"),EN_RXADDR);
    1432:	21 e0       	ldi	r18, 0x01	; 1
    1434:	42 e0       	ldi	r20, 0x02	; 2
    1436:	61 ed       	ldi	r22, 0xD1	; 209
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	ce 01       	movw	r24, r28
    143c:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("RF_CH"),RF_CH);
    1440:	21 e0       	ldi	r18, 0x01	; 1
    1442:	45 e0       	ldi	r20, 0x05	; 5
    1444:	6b ec       	ldi	r22, 0xCB	; 203
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	ce 01       	movw	r24, r28
    144a:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("RF_SETUP"),RF_SETUP);
    144e:	21 e0       	ldi	r18, 0x01	; 1
    1450:	46 e0       	ldi	r20, 0x06	; 6
    1452:	62 ec       	ldi	r22, 0xC2	; 194
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	ce 01       	movw	r24, r28
    1458:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("CONFIG"),CONFIG);
    145c:	21 e0       	ldi	r18, 0x01	; 1
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	6b eb       	ldi	r22, 0xBB	; 187
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>
  print_byte_register(PSTR("DYNPD/FEATURE"),DYNPD,2);
    146a:	22 e0       	ldi	r18, 0x02	; 2
    146c:	4c e1       	ldi	r20, 0x1C	; 28
    146e:	6d ea       	ldi	r22, 0xAD	; 173
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	ce 01       	movw	r24, r28
    1474:	0e 94 ed 05 	call	0xbda	; 0xbda <_ZN4RF2419print_byte_registerEPKchh>

  printf_P(PSTR("Data Rate\t = %S\r\n"),pgm_read_word(&rf24_datarate_e_str_P[getDataRate()]));
    1478:	ce 01       	movw	r24, r28
    147a:	0e 94 75 09 	call	0x12ea	; 0x12ea <_ZN4RF2411getDataRateEv>
    147e:	e8 2f       	mov	r30, r24
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	ee 0f       	add	r30, r30
    1484:	ff 1f       	adc	r31, r31
    1486:	e9 51       	subi	r30, 0x19	; 25
    1488:	fe 4f       	sbci	r31, 0xFE	; 254
    148a:	85 91       	lpm	r24, Z+
    148c:	94 91       	lpm	r25, Z
    148e:	9f 93       	push	r25
    1490:	8f 93       	push	r24
    1492:	8b e9       	ldi	r24, 0x9B	; 155
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
  printf_P(PSTR("Model\t\t = %S\r\n"),pgm_read_word(&rf24_model_e_str_P[isPVariant()]));
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	ee 0f       	add	r30, r30
    14a4:	ff 1f       	adc	r31, r31
    14a6:	e0 53       	subi	r30, 0x30	; 48
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	85 91       	lpm	r24, Z+
    14ac:	94 91       	lpm	r25, Z
    14ae:	9f 93       	push	r25
    14b0:	8f 93       	push	r24
    14b2:	8c e8       	ldi	r24, 0x8C	; 140
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	9f 93       	push	r25
    14b8:	8f 93       	push	r24
    14ba:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
  printf_P(PSTR("CRC Length\t = %S\r\n"),pgm_read_word(&rf24_crclength_e_str_P[getCRCLength()]));
    14be:	ce 01       	movw	r24, r28
    14c0:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <_ZN4RF2412getCRCLengthEv>
    14c4:	e8 2f       	mov	r30, r24
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	ee 0f       	add	r30, r30
    14ca:	ff 1f       	adc	r31, r31
    14cc:	ee 54       	subi	r30, 0x4E	; 78
    14ce:	fe 4f       	sbci	r31, 0xFE	; 254
    14d0:	85 91       	lpm	r24, Z+
    14d2:	94 91       	lpm	r25, Z
    14d4:	9f 93       	push	r25
    14d6:	8f 93       	push	r24
    14d8:	89 e7       	ldi	r24, 0x79	; 121
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	9f 93       	push	r25
    14de:	8f 93       	push	r24
    14e0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
  printf_P(PSTR("PA Power\t = %S\r\n"),pgm_read_word(&rf24_pa_dbm_e_str_P[getPALevel()]));
    14e4:	ce 01       	movw	r24, r28
    14e6:	0e 94 3a 09 	call	0x1274	; 0x1274 <_ZN4RF2410getPALevelEv>
    14ea:	e8 2f       	mov	r30, r24
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	ee 0f       	add	r30, r30
    14f0:	ff 1f       	adc	r31, r31
    14f2:	e3 57       	subi	r30, 0x73	; 115
    14f4:	fe 4f       	sbci	r31, 0xFE	; 254
    14f6:	85 91       	lpm	r24, Z+
    14f8:	94 91       	lpm	r25, Z
    14fa:	9f 93       	push	r25
    14fc:	8f 93       	push	r24
    14fe:	88 e6       	ldi	r24, 0x68	; 104
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9f 93       	push	r25
    1504:	8f 93       	push	r24
    1506:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <printf_P>
    150a:	8d b7       	in	r24, 0x3d	; 61
    150c:	9e b7       	in	r25, 0x3e	; 62
    150e:	40 96       	adiw	r24, 0x10	; 16
    1510:	0f b6       	in	r0, 0x3f	; 63
    1512:	f8 94       	cli
    1514:	9e bf       	out	0x3e, r25	; 62
    1516:	0f be       	out	0x3f, r0	; 63
    1518:	8d bf       	out	0x3d, r24	; 61
}
    151a:	df 91       	pop	r29
    151c:	cf 91       	pop	r28
    151e:	08 95       	ret

00001520 <_ZN4RF2410setRetriesEhh>:
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    1520:	20 e1       	ldi	r18, 0x10	; 16
    1522:	62 9f       	mul	r22, r18
    1524:	b0 01       	movw	r22, r0
    1526:	11 24       	eor	r1, r1
    1528:	4f 70       	andi	r20, 0x0F	; 15
    152a:	46 2b       	or	r20, r22
    152c:	64 e0       	ldi	r22, 0x04	; 4
    152e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <_ZN4RF2414write_registerEhh>
    1532:	08 95       	ret

00001534 <_ZN9SensorNetC1Ev>:


#include "SensorNet.h"

// default constructor
SensorNet::SensorNet()
    1534:	0e 94 c4 06 	call	0xd88	; 0xd88 <_ZN4RF24C1Ev>
    1538:	08 95       	ret

0000153a <_ZN9SensorNetD1Ev>:
{
} //SensorNet

// default destructor
SensorNet::~SensorNet()
    153a:	08 95       	ret

0000153c <_ZN9SensorNet5setupEv>:
{
} //~SensorNet

void SensorNet::setup()
{
    153c:	ef 92       	push	r14
    153e:	ff 92       	push	r15
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	ec 01       	movw	r28, r24
	uint64_t pipes[2];
	pipes[0] = 0xF0F0F0F0E1LL;
	pipes[1] = 0xF0F0F0F0D2LL;

	radio.begin();
    154a:	0e 94 9c 09 	call	0x1338	; 0x1338 <_ZN4RF245beginEv>
	radio.enableDynamicPayloads();
    154e:	ce 01       	movw	r24, r28
    1550:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <_ZN4RF2421enableDynamicPayloadsEv>
	radio.setRetries(15, 15);
    1554:	4f e0       	ldi	r20, 0x0F	; 15
    1556:	6f e0       	ldi	r22, 0x0F	; 15
    1558:	ce 01       	movw	r24, r28
    155a:	0e 94 90 0a 	call	0x1520	; 0x1520 <_ZN4RF2410setRetriesEhh>
	radio.openWritingPipe(pipes[1]);
    155e:	02 ed       	ldi	r16, 0xD2	; 210
    1560:	10 ef       	ldi	r17, 0xF0	; 240
    1562:	20 ef       	ldi	r18, 0xF0	; 240
    1564:	30 ef       	ldi	r19, 0xF0	; 240
    1566:	40 ef       	ldi	r20, 0xF0	; 240
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	ce 01       	movw	r24, r28
    1570:	0e 94 23 08 	call	0x1046	; 0x1046 <_ZN4RF2415openWritingPipeEy>
	radio.openReadingPipe(1, pipes[0]);
    1574:	0f 2e       	mov	r0, r31
    1576:	f1 ee       	ldi	r31, 0xE1	; 225
    1578:	ef 2e       	mov	r14, r31
    157a:	f0 2d       	mov	r31, r0
    157c:	0f 2e       	mov	r0, r31
    157e:	f0 ef       	ldi	r31, 0xF0	; 240
    1580:	ff 2e       	mov	r15, r31
    1582:	f0 2d       	mov	r31, r0
    1584:	00 ef       	ldi	r16, 0xF0	; 240
    1586:	20 ef       	ldi	r18, 0xF0	; 240
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	61 e0       	ldi	r22, 0x01	; 1
    1590:	ce 01       	movw	r24, r28
    1592:	0e 94 5f 08 	call	0x10be	; 0x10be <_ZN4RF2415openReadingPipeEhy>
	radio.startListening();
    1596:	ce 01       	movw	r24, r28
    1598:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN4RF2414startListeningEv>
	radio.printDetails();
    159c:	ce 01       	movw	r24, r28
    159e:	0e 94 ed 09 	call	0x13da	; 0x13da <_ZN4RF2412printDetailsEv>
}
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	08 95       	ret

000015b0 <_ZN9SensorNet4tickEv>:
void SensorNet::tick()
{
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	ec 01       	movw	r28, r24
	// if there is data ready
	if ( radio.available() )
    15b8:	0e 94 9c 07 	call	0xf38	; 0xf38 <_ZN4RF249availableEv>
    15bc:	88 23       	and	r24, r24
    15be:	81 f0       	breq	.+32     	; 0x15e0 <_ZN9SensorNet4tickEv+0x30>
	{
		// Dump the payloads until we've gotten everything
		uint8_t len = radio.getDynamicPayloadSize();
    15c0:	ce 01       	movw	r24, r28
    15c2:	0e 94 55 07 	call	0xeaa	; 0xeaa <_ZN4RF2421getDynamicPayloadSizeEv>
    15c6:	18 2f       	mov	r17, r24
					// Fetch the payload, and see if this was the last one.
			radio.read(receive_payload, len );
    15c8:	be 01       	movw	r22, r28
    15ca:	62 5e       	subi	r22, 0xE2	; 226
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255
    15ce:	48 2f       	mov	r20, r24
    15d0:	ce 01       	movw	r24, r28
    15d2:	0e 94 a1 07 	call	0xf42	; 0xf42 <_ZN4RF244readEPvh>
			this->receive_size = len;
    15d6:	1f af       	std	Y+63, r17	; 0x3f
			this->pendingpacket = true;
    15d8:	cf 5b       	subi	r28, 0xBF	; 191
    15da:	df 4f       	sbci	r29, 0xFF	; 255
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	88 83       	st	Y, r24
	}

	
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	08 95       	ret

000015e8 <_ZN9SensorNet10sendpacketEPKvh>:
void SensorNet::sendpacket(const void* payload, const uint8_t len)
{
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
    15f4:	8b 01       	movw	r16, r22
    15f6:	f4 2e       	mov	r15, r20
	// First, stop listening so we can talk
	radio.stopListening();
    15f8:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN4RF2413stopListeningEv>
	// Send the final one back.
	radio.write(payload, len );
    15fc:	4f 2d       	mov	r20, r15
    15fe:	b8 01       	movw	r22, r16
    1600:	ce 01       	movw	r24, r28
    1602:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <_ZN4RF245writeEPKvh>
	// Now, resume listening so we catch the next packets.
	radio.startListening();
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 dd 06 	call	0xdba	; 0xdba <_ZN4RF2414startListeningEv>
}
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	08 95       	ret

00001618 <_ZN3SPI4initEv>:
#include "SPI.h"

void SPI::init()
{
		// Set MOSI, SCK,SS as output, MISO as input
		DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
    1618:	84 b1       	in	r24, 0x04	; 4
    161a:	8c 62       	ori	r24, 0x2C	; 44
    161c:	84 b9       	out	0x04, r24	; 4
		DDRB &= ~(1<<PB4); 
    161e:	24 98       	cbi	0x04, 4	; 4
		
		// Latch Disable (RCK Low)
		// SPI_PORT &= ~(1<<SPI_CS);
		// Enable SPI, Master, set clock rate fck/2 (maximum)
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1); // this is here until xtal sorted.
    1620:	83 e5       	ldi	r24, 0x53	; 83
    1622:	8c bd       	out	0x2c, r24	; 44
    1624:	08 95       	ret

00001626 <_ZN3SPI8transferEh>:
unsigned char SPI::transfer(unsigned char dataout)
{
	unsigned char datain;
	// Start transmission (MOSI)
	//SPI_PORT |= (1<<SPI_CS);
	SPDR = dataout;
    1626:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1628:	0d b4       	in	r0, 0x2d	; 45
    162a:	07 fe       	sbrs	r0, 7
    162c:	fd cf       	rjmp	.-6      	; 0x1628 <_ZN3SPI8transferEh+0x2>
	// Get return Value;
	datain = SPDR;
    162e:	8e b5       	in	r24, 0x2e	; 46
	// Disable Latch
	//	SPI_PORT &= ~(1<<SPI_CS);
	// Return Serial In Value (MISO)
	//SPI_PORT |= (0<<SPI_CS);
	return datain;
}
    1630:	08 95       	ret

00001632 <_ZN3SPI11setBitOrderEh>:


void SPI::setBitOrder(uint8_t bitOrder)
{
	if(bitOrder == LSBFIRST) {
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	21 f4       	brne	.+8      	; 0x163e <_ZN3SPI11setBitOrderEh+0xc>
		SPCR |= _BV(DORD);
    1636:	8c b5       	in	r24, 0x2c	; 44
    1638:	80 62       	ori	r24, 0x20	; 32
    163a:	8c bd       	out	0x2c, r24	; 44
    163c:	08 95       	ret
		} else {
		SPCR &= ~(_BV(DORD));
    163e:	8c b5       	in	r24, 0x2c	; 44
    1640:	8f 7d       	andi	r24, 0xDF	; 223
    1642:	8c bd       	out	0x2c, r24	; 44
    1644:	08 95       	ret

00001646 <_ZN3SPI11setDataModeEh>:
	}
}

void SPI::setDataMode(uint8_t mode)
{
	SPCR = (SPCR & ~SPI_MODE_MASK) | mode;
    1646:	9c b5       	in	r25, 0x2c	; 44
    1648:	93 7f       	andi	r25, 0xF3	; 243
    164a:	89 2b       	or	r24, r25
    164c:	8c bd       	out	0x2c, r24	; 44
    164e:	08 95       	ret

00001650 <_ZN3SPI15setClockDividerEh>:
}

void SPI::setClockDivider(uint8_t rate)
{
	SPCR = (SPCR & ~SPI_CLOCK_MASK) | (rate & SPI_CLOCK_MASK);
    1650:	9c b5       	in	r25, 0x2c	; 44
    1652:	28 2f       	mov	r18, r24
    1654:	23 70       	andi	r18, 0x03	; 3
    1656:	9c 7f       	andi	r25, 0xFC	; 252
    1658:	92 2b       	or	r25, r18
    165a:	9c bd       	out	0x2c, r25	; 44
	SPSR = (SPSR & ~SPI_2XCLOCK_MASK) | ((rate >> 2) & SPI_2XCLOCK_MASK);
    165c:	2d b5       	in	r18, 0x2d	; 45
    165e:	82 fb       	bst	r24, 2
    1660:	99 27       	eor	r25, r25
    1662:	90 f9       	bld	r25, 0
    1664:	82 2f       	mov	r24, r18
    1666:	8e 7f       	andi	r24, 0xFE	; 254
    1668:	89 2b       	or	r24, r25
    166a:	8d bd       	out	0x2d, r24	; 45
    166c:	08 95       	ret

0000166e <_ZN6Timing6millisEv>:


unsigned long Timing::millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    166e:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1670:	f8 94       	cli
	m = timer0_millis;
    1672:	60 91 07 01 	lds	r22, 0x0107
    1676:	70 91 08 01 	lds	r23, 0x0108
    167a:	80 91 09 01 	lds	r24, 0x0109
    167e:	90 91 0a 01 	lds	r25, 0x010A
	SREG = oldSREG;
    1682:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1684:	08 95       	ret

00001686 <__vector_16>:

/* Time/Counter0 Overflow */
ISR(TIMER0_OVF_vect)
{
    1686:	1f 92       	push	r1
    1688:	0f 92       	push	r0
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	0f 92       	push	r0
    168e:	11 24       	eor	r1, r1
    1690:	2f 93       	push	r18
    1692:	3f 93       	push	r19
    1694:	8f 93       	push	r24
    1696:	9f 93       	push	r25
    1698:	af 93       	push	r26
    169a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    169c:	80 91 07 01 	lds	r24, 0x0107
    16a0:	90 91 08 01 	lds	r25, 0x0108
    16a4:	a0 91 09 01 	lds	r26, 0x0109
    16a8:	b0 91 0a 01 	lds	r27, 0x010A
	unsigned char f = timer0_fract;
    16ac:	30 91 06 01 	lds	r19, 0x0106

	m += MILLIS_INC;
	f += FRACT_INC;
    16b0:	26 e0       	ldi	r18, 0x06	; 6
    16b2:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    16b4:	2d 37       	cpi	r18, 0x7D	; 125
    16b6:	20 f4       	brcc	.+8      	; 0x16c0 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    16b8:	02 96       	adiw	r24, 0x02	; 2
    16ba:	a1 1d       	adc	r26, r1
    16bc:	b1 1d       	adc	r27, r1
    16be:	05 c0       	rjmp	.+10     	; 0x16ca <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    16c0:	29 e8       	ldi	r18, 0x89	; 137
    16c2:	23 0f       	add	r18, r19
		m += 1;
    16c4:	03 96       	adiw	r24, 0x03	; 3
    16c6:	a1 1d       	adc	r26, r1
    16c8:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    16ca:	20 93 06 01 	sts	0x0106, r18
	timer0_millis = m;
    16ce:	80 93 07 01 	sts	0x0107, r24
    16d2:	90 93 08 01 	sts	0x0108, r25
    16d6:	a0 93 09 01 	sts	0x0109, r26
    16da:	b0 93 0a 01 	sts	0x010A, r27
	timer0_overflow_count++;
    16de:	80 91 0b 01 	lds	r24, 0x010B
    16e2:	90 91 0c 01 	lds	r25, 0x010C
    16e6:	a0 91 0d 01 	lds	r26, 0x010D
    16ea:	b0 91 0e 01 	lds	r27, 0x010E
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	a1 1d       	adc	r26, r1
    16f2:	b1 1d       	adc	r27, r1
    16f4:	80 93 0b 01 	sts	0x010B, r24
    16f8:	90 93 0c 01 	sts	0x010C, r25
    16fc:	a0 93 0d 01 	sts	0x010D, r26
    1700:	b0 93 0e 01 	sts	0x010E, r27

}
    1704:	bf 91       	pop	r27
    1706:	af 91       	pop	r26
    1708:	9f 91       	pop	r25
    170a:	8f 91       	pop	r24
    170c:	3f 91       	pop	r19
    170e:	2f 91       	pop	r18
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <_ZN6Timing4initEv>:
void Timing::init()
{
	sei();
    171a:	78 94       	sei
	
	TCCR0A|= (1<< WGM01);
    171c:	84 b5       	in	r24, 0x24	; 36
    171e:	82 60       	ori	r24, 0x02	; 2
    1720:	84 bd       	out	0x24, r24	; 36
	TCCR0A|= (1<< WGM00);
    1722:	84 b5       	in	r24, 0x24	; 36
    1724:	81 60       	ori	r24, 0x01	; 1
    1726:	84 bd       	out	0x24, r24	; 36
	/*set clock select to clk/64 */
	TCCR0B |= (1<< CS01);
    1728:	85 b5       	in	r24, 0x25	; 37
    172a:	82 60       	ori	r24, 0x02	; 2
    172c:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<< CS00);
    172e:	85 b5       	in	r24, 0x25	; 37
    1730:	81 60       	ori	r24, 0x01	; 1
    1732:	85 bd       	out	0x25, r24	; 37

	/* enable interrupt on overflow.*/
	TIMSK0  |=(1<<TOIE0);
    1734:	ee e6       	ldi	r30, 0x6E	; 110
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	81 60       	ori	r24, 0x01	; 1
    173c:	80 83       	st	Z, r24
    173e:	08 95       	ret

00001740 <_Z14USART0SendBytecP6__file>:
	//start up mqtt layer, this will also initialize the radio, and the network layer running on the network.
network.setup(); //ensure network is setup before any MQTT work is done.
//	comms.setcallback(messageReceived);
}
int USART0SendByte (char c, FILE *stream)
{
    1740:	cf 93       	push	r28
    1742:	c8 2f       	mov	r28, r24
	if (c == '\n')
    1744:	8a 30       	cpi	r24, 0x0A	; 10
    1746:	19 f4       	brne	.+6      	; 0x174e <_Z14USART0SendBytecP6__file+0xe>
	USART0SendByte('\r', stream);
    1748:	8d e0       	ldi	r24, 0x0D	; 13
    174a:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_Z14USART0SendBytecP6__file>
	
	// Wait for the transmit buffer to be empty
	while ( !( UCSR0A & (1<<UDRE0)) );
    174e:	e0 ec       	ldi	r30, 0xC0	; 192
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	90 81       	ld	r25, Z
    1754:	95 ff       	sbrs	r25, 5
    1756:	fd cf       	rjmp	.-6      	; 0x1752 <_Z14USART0SendBytecP6__file+0x12>
	
	// Put our character into the transmit buffer
	UDR0 = c;
    1758:	c0 93 c6 00 	sts	0x00C6, r28
	
	return 0;
}
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <_Z17USART0ReceiveByteP6__file>:
int USART0ReceiveByte(FILE *stream)
{
    1764:	cf 93       	push	r28
    1766:	bc 01       	movw	r22, r24
	uint8_t u8Data;
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
    1768:	e0 ec       	ldi	r30, 0xC0	; 192
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 23       	and	r24, r24
    1770:	ec f7       	brge	.-6      	; 0x176c <_Z17USART0ReceiveByteP6__file+0x8>
	u8Data=UDR0;
    1772:	c0 91 c6 00 	lds	r28, 0x00C6
	//echo input data
	USART0SendByte(u8Data,stream);
    1776:	8c 2f       	mov	r24, r28
    1778:	0e 94 a0 0b 	call	0x1740	; 0x1740 <_Z14USART0SendBytecP6__file>
	// Return received data
	return u8Data;
}
    177c:	8c 2f       	mov	r24, r28
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <_Z9USARTinitv>:
void USARTinit(void)
{
	//set baud rate.
	UBRR0H = UBRRH_VALUE;
    1784:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = UBRRL_VALUE;
    1788:	83 e3       	ldi	r24, 0x33	; 51
    178a:	80 93 c4 00 	sts	0x00C4, r24
	
	#if USE_2X
	UCSR0A |= (1<<U2X0);
	#else
	UCSR0A &= ~(1<<U2X0);
    178e:	e0 ec       	ldi	r30, 0xC0	; 192
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8d 7f       	andi	r24, 0xFD	; 253
    1796:	80 83       	st	Z, r24
	#endif
	
	//enable RX & TX
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
    1798:	88 e1       	ldi	r24, 0x18	; 24
    179a:	80 93 c1 00 	sts	0x00C1, r24

	//set frame format, 8 data, 1 stop
	//1 stop bit
	UCSR0C &= ~(1<<USBS0);
    179e:	e2 ec       	ldi	r30, 0xC2	; 194
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	87 7f       	andi	r24, 0xF7	; 247
    17a6:	80 83       	st	Z, r24
	//8 data
	UCSR0C |=  (1<<UCSZ00)|(1<<UCSZ01);
    17a8:	80 81       	ld	r24, Z
    17aa:	86 60       	ori	r24, 0x06	; 6
    17ac:	80 83       	st	Z, r24
	
	usart0_str = fdevopen(USART0SendByte, USART0ReceiveByte);
    17ae:	62 eb       	ldi	r22, 0xB2	; 178
    17b0:	7b e0       	ldi	r23, 0x0B	; 11
    17b2:	80 ea       	ldi	r24, 0xA0	; 160
    17b4:	9b e0       	ldi	r25, 0x0B	; 11
    17b6:	0e 94 98 0c 	call	0x1930	; 0x1930 <fdevopen>
    17ba:	90 93 8d 01 	sts	0x018D, r25
    17be:	80 93 8c 01 	sts	0x018C, r24
	stdin=stdout=usart0_str;
    17c2:	90 93 91 01 	sts	0x0191, r25
    17c6:	80 93 90 01 	sts	0x0190, r24
    17ca:	90 93 8f 01 	sts	0x018F, r25
    17ce:	80 93 8e 01 	sts	0x018E, r24
    17d2:	08 95       	ret

000017d4 <_Z5setupv>:
//	comms.disconnect(false);
}
void setup(void)
{
	//setup serial
	USARTinit();
    17d4:	0e 94 c2 0b 	call	0x1784	; 0x1784 <_Z9USARTinitv>
	//start timers for milli function.
	Timing::init();
    17d8:	0e 94 8d 0b 	call	0x171a	; 0x171a <_ZN6Timing4initEv>
	//start up mqtt layer, this will also initialize the radio, and the network layer running on the network.
network.setup(); //ensure network is setup before any MQTT work is done.
    17dc:	8a e4       	ldi	r24, 0x4A	; 74
    17de:	91 e0       	ldi	r25, 0x01	; 1
    17e0:	0e 94 9e 0a 	call	0x153c	; 0x153c <_ZN9SensorNet5setupEv>
    17e4:	08 95       	ret

000017e6 <main>:
SensorNet network;
MQTTSN app(network,(uint8_t) 0x28);

int main(void)
{
	setup();
    17e6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <_Z5setupv>
    17ea:	2f ef       	ldi	r18, 0xFF	; 255
    17ec:	80 e7       	ldi	r24, 0x70	; 112
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	21 50       	subi	r18, 0x01	; 1
    17f2:	80 40       	sbci	r24, 0x00	; 0
    17f4:	90 40       	sbci	r25, 0x00	; 0
    17f6:	e1 f7       	brne	.-8      	; 0x17f0 <main+0xa>
    17f8:	00 c0       	rjmp	.+0      	; 0x17fa <main+0x14>
    17fa:	00 00       	nop
	_delay_ms(100);
	//comms.connect();
	app.connect();
    17fc:	8f e0       	ldi	r24, 0x0F	; 15
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	0e 94 4d 01 	call	0x29a	; 0x29a <_ZN6MQTTSN7connectEv>
    1804:	2f ef       	ldi	r18, 0xFF	; 255
    1806:	89 e6       	ldi	r24, 0x69	; 105
    1808:	98 e1       	ldi	r25, 0x18	; 24
    180a:	21 50       	subi	r18, 0x01	; 1
    180c:	80 40       	sbci	r24, 0x00	; 0
    180e:	90 40       	sbci	r25, 0x00	; 0
    1810:	e1 f7       	brne	.-8      	; 0x180a <main+0x24>
    1812:	00 c0       	rjmp	.+0      	; 0x1814 <main+0x2e>
    1814:	00 00       	nop
    1816:	2f ef       	ldi	r18, 0xFF	; 255
    1818:	89 e6       	ldi	r24, 0x69	; 105
    181a:	98 e1       	ldi	r25, 0x18	; 24
    181c:	21 50       	subi	r18, 0x01	; 1
    181e:	80 40       	sbci	r24, 0x00	; 0
    1820:	90 40       	sbci	r25, 0x00	; 0
    1822:	e1 f7       	brne	.-8      	; 0x181c <main+0x36>
    1824:	00 c0       	rjmp	.+0      	; 0x1826 <main+0x40>
    1826:	00 00       	nop
    1828:	2f ef       	ldi	r18, 0xFF	; 255
    182a:	89 e6       	ldi	r24, 0x69	; 105
    182c:	98 e1       	ldi	r25, 0x18	; 24
    182e:	21 50       	subi	r18, 0x01	; 1
    1830:	80 40       	sbci	r24, 0x00	; 0
    1832:	90 40       	sbci	r25, 0x00	; 0
    1834:	e1 f7       	brne	.-8      	; 0x182e <main+0x48>
    1836:	00 c0       	rjmp	.+0      	; 0x1838 <main+0x52>
    1838:	00 00       	nop
    183a:	2f ef       	ldi	r18, 0xFF	; 255
    183c:	89 e6       	ldi	r24, 0x69	; 105
    183e:	98 e1       	ldi	r25, 0x18	; 24
    1840:	21 50       	subi	r18, 0x01	; 1
    1842:	80 40       	sbci	r24, 0x00	; 0
    1844:	90 40       	sbci	r25, 0x00	; 0
    1846:	e1 f7       	brne	.-8      	; 0x1840 <main+0x5a>
    1848:	00 c0       	rjmp	.+0      	; 0x184a <main+0x64>
    184a:	00 00       	nop
	
	_delay_ms(1000);
		_delay_ms(1000);
			_delay_ms(1000);
				_delay_ms(1000);
					app.tick();
    184c:	8f e0       	ldi	r24, 0x0F	; 15
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN6MQTTSN4tickEv>
    1854:	2f ef       	ldi	r18, 0xFF	; 255
    1856:	89 e6       	ldi	r24, 0x69	; 105
    1858:	98 e1       	ldi	r25, 0x18	; 24
    185a:	21 50       	subi	r18, 0x01	; 1
    185c:	80 40       	sbci	r24, 0x00	; 0
    185e:	90 40       	sbci	r25, 0x00	; 0
    1860:	e1 f7       	brne	.-8      	; 0x185a <main+0x74>
    1862:	00 c0       	rjmp	.+0      	; 0x1864 <main+0x7e>
    1864:	00 00       	nop
    1866:	2f ef       	ldi	r18, 0xFF	; 255
    1868:	89 e6       	ldi	r24, 0x69	; 105
    186a:	98 e1       	ldi	r25, 0x18	; 24
    186c:	21 50       	subi	r18, 0x01	; 1
    186e:	80 40       	sbci	r24, 0x00	; 0
    1870:	90 40       	sbci	r25, 0x00	; 0
    1872:	e1 f7       	brne	.-8      	; 0x186c <main+0x86>
    1874:	00 c0       	rjmp	.+0      	; 0x1876 <main+0x90>
    1876:	00 00       	nop
    1878:	2f ef       	ldi	r18, 0xFF	; 255
    187a:	89 e6       	ldi	r24, 0x69	; 105
    187c:	98 e1       	ldi	r25, 0x18	; 24
    187e:	21 50       	subi	r18, 0x01	; 1
    1880:	80 40       	sbci	r24, 0x00	; 0
    1882:	90 40       	sbci	r25, 0x00	; 0
    1884:	e1 f7       	brne	.-8      	; 0x187e <main+0x98>
    1886:	00 c0       	rjmp	.+0      	; 0x1888 <main+0xa2>
    1888:	00 00       	nop
    188a:	2f ef       	ldi	r18, 0xFF	; 255
    188c:	89 e6       	ldi	r24, 0x69	; 105
    188e:	98 e1       	ldi	r25, 0x18	; 24
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	80 40       	sbci	r24, 0x00	; 0
    1894:	90 40       	sbci	r25, 0x00	; 0
    1896:	e1 f7       	brne	.-8      	; 0x1890 <main+0xaa>
    1898:	00 c0       	rjmp	.+0      	; 0x189a <main+0xb4>
    189a:	00 00       	nop
    189c:	2f ef       	ldi	r18, 0xFF	; 255
    189e:	89 e6       	ldi	r24, 0x69	; 105
    18a0:	98 e1       	ldi	r25, 0x18	; 24
    18a2:	21 50       	subi	r18, 0x01	; 1
    18a4:	80 40       	sbci	r24, 0x00	; 0
    18a6:	90 40       	sbci	r25, 0x00	; 0
    18a8:	e1 f7       	brne	.-8      	; 0x18a2 <main+0xbc>
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <main+0xc6>
    18ac:	00 00       	nop
					_delay_ms(1000);
						_delay_ms(1000);
							_delay_ms(1000);
								_delay_ms(1000);
									_delay_ms(1000);
	app.disconnect(false);
    18ae:	60 e0       	ldi	r22, 0x00	; 0
    18b0:	8f e0       	ldi	r24, 0x0F	; 15
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 94 01 	call	0x328	; 0x328 <_ZN6MQTTSN10disconnectEb>
	while(1)
	{
	app.tick();
    18b8:	8f e0       	ldi	r24, 0x0F	; 15
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN6MQTTSN4tickEv>
	//	if (network.pendingpacket == true) //? handle here or in the MQTTSN class?
		network.sendpacket((const void*)0x28596E72, 4);
    18c0:	44 e0       	ldi	r20, 0x04	; 4
    18c2:	62 e7       	ldi	r22, 0x72	; 114
    18c4:	7e e6       	ldi	r23, 0x6E	; 110
    18c6:	8a e4       	ldi	r24, 0x4A	; 74
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <_ZN9SensorNet10sendpacketEPKvh>
    18ce:	f4 cf       	rjmp	.-24     	; 0x18b8 <main+0xd2>

000018d0 <_GLOBAL__sub_I_usart0_str>:
int USART0ReceiveByte(FILE *stream);
void USARTinit(void);
void setup(void);
FILE * usart0_str;

SensorNet network;
    18d0:	8a e4       	ldi	r24, 0x4A	; 74
    18d2:	91 e0       	ldi	r25, 0x01	; 1
    18d4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <_ZN9SensorNetC1Ev>
MQTTSN app(network,(uint8_t) 0x28);
    18d8:	48 e2       	ldi	r20, 0x28	; 40
    18da:	6a e4       	ldi	r22, 0x4A	; 74
    18dc:	71 e0       	ldi	r23, 0x01	; 1
    18de:	8f e0       	ldi	r24, 0x0F	; 15
    18e0:	91 e0       	ldi	r25, 0x01	; 1
    18e2:	0e 94 2d 01 	call	0x25a	; 0x25a <_ZN6MQTTSNC1ER9SensorNeth>
    18e6:	08 95       	ret

000018e8 <_GLOBAL__sub_D_usart0_str>:
    18e8:	8f e0       	ldi	r24, 0x0F	; 15
    18ea:	91 e0       	ldi	r25, 0x01	; 1
    18ec:	0e 94 43 01 	call	0x286	; 0x286 <_ZN6MQTTSND1Ev>
int USART0ReceiveByte(FILE *stream);
void USARTinit(void);
void setup(void);
FILE * usart0_str;

SensorNet network;
    18f0:	8a e4       	ldi	r24, 0x4A	; 74
    18f2:	91 e0       	ldi	r25, 0x01	; 1
    18f4:	0e 94 9d 0a 	call	0x153a	; 0x153a <_ZN9SensorNetD1Ev>
    18f8:	08 95       	ret

000018fa <__cmpdi2_s8>:
    18fa:	00 24       	eor	r0, r0
    18fc:	a7 fd       	sbrc	r26, 7
    18fe:	00 94       	com	r0
    1900:	2a 17       	cp	r18, r26
    1902:	30 05       	cpc	r19, r0
    1904:	40 05       	cpc	r20, r0
    1906:	50 05       	cpc	r21, r0
    1908:	60 05       	cpc	r22, r0
    190a:	70 05       	cpc	r23, r0
    190c:	80 05       	cpc	r24, r0
    190e:	90 05       	cpc	r25, r0
    1910:	08 95       	ret

00001912 <__tablejump2__>:
    1912:	ee 0f       	add	r30, r30
    1914:	ff 1f       	adc	r31, r31

00001916 <__tablejump__>:
    1916:	05 90       	lpm	r0, Z+
    1918:	f4 91       	lpm	r31, Z
    191a:	e0 2d       	mov	r30, r0
    191c:	09 94       	ijmp

0000191e <__strlen_P>:
    191e:	fc 01       	movw	r30, r24
    1920:	05 90       	lpm	r0, Z+
    1922:	00 20       	and	r0, r0
    1924:	e9 f7       	brne	.-6      	; 0x1920 <__strlen_P+0x2>
    1926:	80 95       	com	r24
    1928:	90 95       	com	r25
    192a:	8e 0f       	add	r24, r30
    192c:	9f 1f       	adc	r25, r31
    192e:	08 95       	ret

00001930 <fdevopen>:
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
    193a:	8b 01       	movw	r16, r22
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	31 f4       	brne	.+12     	; 0x194c <fdevopen+0x1c>
    1940:	61 15       	cp	r22, r1
    1942:	71 05       	cpc	r23, r1
    1944:	19 f4       	brne	.+6      	; 0x194c <fdevopen+0x1c>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	38 c0       	rjmp	.+112    	; 0x19bc <fdevopen+0x8c>
    194c:	6e e0       	ldi	r22, 0x0E	; 14
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <calloc>
    1958:	fc 01       	movw	r30, r24
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	a1 f3       	breq	.-24     	; 0x1946 <fdevopen+0x16>
    195e:	80 e8       	ldi	r24, 0x80	; 128
    1960:	83 83       	std	Z+3, r24	; 0x03
    1962:	01 15       	cp	r16, r1
    1964:	11 05       	cpc	r17, r1
    1966:	71 f0       	breq	.+28     	; 0x1984 <fdevopen+0x54>
    1968:	13 87       	std	Z+11, r17	; 0x0b
    196a:	02 87       	std	Z+10, r16	; 0x0a
    196c:	81 e8       	ldi	r24, 0x81	; 129
    196e:	83 83       	std	Z+3, r24	; 0x03
    1970:	80 91 8e 01 	lds	r24, 0x018E
    1974:	90 91 8f 01 	lds	r25, 0x018F
    1978:	89 2b       	or	r24, r25
    197a:	21 f4       	brne	.+8      	; 0x1984 <fdevopen+0x54>
    197c:	f0 93 8f 01 	sts	0x018F, r31
    1980:	e0 93 8e 01 	sts	0x018E, r30
    1984:	20 97       	sbiw	r28, 0x00	; 0
    1986:	c9 f0       	breq	.+50     	; 0x19ba <fdevopen+0x8a>
    1988:	d1 87       	std	Z+9, r29	; 0x09
    198a:	c0 87       	std	Z+8, r28	; 0x08
    198c:	83 81       	ldd	r24, Z+3	; 0x03
    198e:	82 60       	ori	r24, 0x02	; 2
    1990:	83 83       	std	Z+3, r24	; 0x03
    1992:	80 91 90 01 	lds	r24, 0x0190
    1996:	90 91 91 01 	lds	r25, 0x0191
    199a:	89 2b       	or	r24, r25
    199c:	71 f4       	brne	.+28     	; 0x19ba <fdevopen+0x8a>
    199e:	f0 93 91 01 	sts	0x0191, r31
    19a2:	e0 93 90 01 	sts	0x0190, r30
    19a6:	80 91 92 01 	lds	r24, 0x0192
    19aa:	90 91 93 01 	lds	r25, 0x0193
    19ae:	89 2b       	or	r24, r25
    19b0:	21 f4       	brne	.+8      	; 0x19ba <fdevopen+0x8a>
    19b2:	f0 93 93 01 	sts	0x0193, r31
    19b6:	e0 93 92 01 	sts	0x0192, r30
    19ba:	cf 01       	movw	r24, r30
    19bc:	df 91       	pop	r29
    19be:	cf 91       	pop	r28
    19c0:	1f 91       	pop	r17
    19c2:	0f 91       	pop	r16
    19c4:	08 95       	ret

000019c6 <printf_P>:
    19c6:	a0 e0       	ldi	r26, 0x00	; 0
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	e9 ee       	ldi	r30, 0xE9	; 233
    19cc:	fc e0       	ldi	r31, 0x0C	; 12
    19ce:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__prologue_saves__+0x1c>
    19d2:	fe 01       	movw	r30, r28
    19d4:	37 96       	adiw	r30, 0x07	; 7
    19d6:	61 91       	ld	r22, Z+
    19d8:	71 91       	ld	r23, Z+
    19da:	00 e9       	ldi	r16, 0x90	; 144
    19dc:	11 e0       	ldi	r17, 0x01	; 1
    19de:	d8 01       	movw	r26, r16
    19e0:	8d 91       	ld	r24, X+
    19e2:	9c 91       	ld	r25, X
    19e4:	dc 01       	movw	r26, r24
    19e6:	13 96       	adiw	r26, 0x03	; 3
    19e8:	2c 91       	ld	r18, X
    19ea:	13 97       	sbiw	r26, 0x03	; 3
    19ec:	28 60       	ori	r18, 0x08	; 8
    19ee:	13 96       	adiw	r26, 0x03	; 3
    19f0:	2c 93       	st	X, r18
    19f2:	af 01       	movw	r20, r30
    19f4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <vfprintf>
    19f8:	d8 01       	movw	r26, r16
    19fa:	ed 91       	ld	r30, X+
    19fc:	fc 91       	ld	r31, X
    19fe:	23 81       	ldd	r18, Z+3	; 0x03
    1a00:	27 7f       	andi	r18, 0xF7	; 247
    1a02:	23 83       	std	Z+3, r18	; 0x03
    1a04:	e4 e0       	ldi	r30, 0x04	; 4
    1a06:	0c 94 f1 10 	jmp	0x21e2	; 0x21e2 <__epilogue_restores__+0x1c>

00001a0a <vfprintf>:
    1a0a:	ac e0       	ldi	r26, 0x0C	; 12
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	eb e0       	ldi	r30, 0x0B	; 11
    1a10:	fd e0       	ldi	r31, 0x0D	; 13
    1a12:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__>
    1a16:	7c 01       	movw	r14, r24
    1a18:	6b 01       	movw	r12, r22
    1a1a:	8a 01       	movw	r16, r20
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	17 82       	std	Z+7, r1	; 0x07
    1a20:	16 82       	std	Z+6, r1	; 0x06
    1a22:	83 81       	ldd	r24, Z+3	; 0x03
    1a24:	81 ff       	sbrs	r24, 1
    1a26:	bd c1       	rjmp	.+890    	; 0x1da2 <vfprintf+0x398>
    1a28:	ce 01       	movw	r24, r28
    1a2a:	01 96       	adiw	r24, 0x01	; 1
    1a2c:	4c 01       	movw	r8, r24
    1a2e:	f7 01       	movw	r30, r14
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	f6 01       	movw	r30, r12
    1a34:	93 fd       	sbrc	r25, 3
    1a36:	85 91       	lpm	r24, Z+
    1a38:	93 ff       	sbrs	r25, 3
    1a3a:	81 91       	ld	r24, Z+
    1a3c:	6f 01       	movw	r12, r30
    1a3e:	88 23       	and	r24, r24
    1a40:	09 f4       	brne	.+2      	; 0x1a44 <vfprintf+0x3a>
    1a42:	ab c1       	rjmp	.+854    	; 0x1d9a <vfprintf+0x390>
    1a44:	85 32       	cpi	r24, 0x25	; 37
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <vfprintf+0x4c>
    1a48:	93 fd       	sbrc	r25, 3
    1a4a:	85 91       	lpm	r24, Z+
    1a4c:	93 ff       	sbrs	r25, 3
    1a4e:	81 91       	ld	r24, Z+
    1a50:	6f 01       	movw	r12, r30
    1a52:	85 32       	cpi	r24, 0x25	; 37
    1a54:	29 f4       	brne	.+10     	; 0x1a60 <vfprintf+0x56>
    1a56:	b7 01       	movw	r22, r14
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1a5e:	e7 cf       	rjmp	.-50     	; 0x1a2e <vfprintf+0x24>
    1a60:	51 2c       	mov	r5, r1
    1a62:	31 2c       	mov	r3, r1
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	20 32       	cpi	r18, 0x20	; 32
    1a68:	a0 f4       	brcc	.+40     	; 0x1a92 <vfprintf+0x88>
    1a6a:	8b 32       	cpi	r24, 0x2B	; 43
    1a6c:	69 f0       	breq	.+26     	; 0x1a88 <vfprintf+0x7e>
    1a6e:	30 f4       	brcc	.+12     	; 0x1a7c <vfprintf+0x72>
    1a70:	80 32       	cpi	r24, 0x20	; 32
    1a72:	59 f0       	breq	.+22     	; 0x1a8a <vfprintf+0x80>
    1a74:	83 32       	cpi	r24, 0x23	; 35
    1a76:	69 f4       	brne	.+26     	; 0x1a92 <vfprintf+0x88>
    1a78:	20 61       	ori	r18, 0x10	; 16
    1a7a:	2c c0       	rjmp	.+88     	; 0x1ad4 <vfprintf+0xca>
    1a7c:	8d 32       	cpi	r24, 0x2D	; 45
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <vfprintf+0x84>
    1a80:	80 33       	cpi	r24, 0x30	; 48
    1a82:	39 f4       	brne	.+14     	; 0x1a92 <vfprintf+0x88>
    1a84:	21 60       	ori	r18, 0x01	; 1
    1a86:	26 c0       	rjmp	.+76     	; 0x1ad4 <vfprintf+0xca>
    1a88:	22 60       	ori	r18, 0x02	; 2
    1a8a:	24 60       	ori	r18, 0x04	; 4
    1a8c:	23 c0       	rjmp	.+70     	; 0x1ad4 <vfprintf+0xca>
    1a8e:	28 60       	ori	r18, 0x08	; 8
    1a90:	21 c0       	rjmp	.+66     	; 0x1ad4 <vfprintf+0xca>
    1a92:	27 fd       	sbrc	r18, 7
    1a94:	27 c0       	rjmp	.+78     	; 0x1ae4 <vfprintf+0xda>
    1a96:	30 ed       	ldi	r19, 0xD0	; 208
    1a98:	38 0f       	add	r19, r24
    1a9a:	3a 30       	cpi	r19, 0x0A	; 10
    1a9c:	78 f4       	brcc	.+30     	; 0x1abc <vfprintf+0xb2>
    1a9e:	26 ff       	sbrs	r18, 6
    1aa0:	06 c0       	rjmp	.+12     	; 0x1aae <vfprintf+0xa4>
    1aa2:	fa e0       	ldi	r31, 0x0A	; 10
    1aa4:	5f 9e       	mul	r5, r31
    1aa6:	30 0d       	add	r19, r0
    1aa8:	11 24       	eor	r1, r1
    1aaa:	53 2e       	mov	r5, r19
    1aac:	13 c0       	rjmp	.+38     	; 0x1ad4 <vfprintf+0xca>
    1aae:	8a e0       	ldi	r24, 0x0A	; 10
    1ab0:	38 9e       	mul	r3, r24
    1ab2:	30 0d       	add	r19, r0
    1ab4:	11 24       	eor	r1, r1
    1ab6:	33 2e       	mov	r3, r19
    1ab8:	20 62       	ori	r18, 0x20	; 32
    1aba:	0c c0       	rjmp	.+24     	; 0x1ad4 <vfprintf+0xca>
    1abc:	8e 32       	cpi	r24, 0x2E	; 46
    1abe:	21 f4       	brne	.+8      	; 0x1ac8 <vfprintf+0xbe>
    1ac0:	26 fd       	sbrc	r18, 6
    1ac2:	6b c1       	rjmp	.+726    	; 0x1d9a <vfprintf+0x390>
    1ac4:	20 64       	ori	r18, 0x40	; 64
    1ac6:	06 c0       	rjmp	.+12     	; 0x1ad4 <vfprintf+0xca>
    1ac8:	8c 36       	cpi	r24, 0x6C	; 108
    1aca:	11 f4       	brne	.+4      	; 0x1ad0 <vfprintf+0xc6>
    1acc:	20 68       	ori	r18, 0x80	; 128
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <vfprintf+0xca>
    1ad0:	88 36       	cpi	r24, 0x68	; 104
    1ad2:	41 f4       	brne	.+16     	; 0x1ae4 <vfprintf+0xda>
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	93 fd       	sbrc	r25, 3
    1ad8:	85 91       	lpm	r24, Z+
    1ada:	93 ff       	sbrs	r25, 3
    1adc:	81 91       	ld	r24, Z+
    1ade:	6f 01       	movw	r12, r30
    1ae0:	81 11       	cpse	r24, r1
    1ae2:	c1 cf       	rjmp	.-126    	; 0x1a66 <vfprintf+0x5c>
    1ae4:	98 2f       	mov	r25, r24
    1ae6:	9f 7d       	andi	r25, 0xDF	; 223
    1ae8:	95 54       	subi	r25, 0x45	; 69
    1aea:	93 30       	cpi	r25, 0x03	; 3
    1aec:	28 f4       	brcc	.+10     	; 0x1af8 <vfprintf+0xee>
    1aee:	0c 5f       	subi	r16, 0xFC	; 252
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	ff e3       	ldi	r31, 0x3F	; 63
    1af4:	f9 83       	std	Y+1, r31	; 0x01
    1af6:	0d c0       	rjmp	.+26     	; 0x1b12 <vfprintf+0x108>
    1af8:	83 36       	cpi	r24, 0x63	; 99
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <vfprintf+0xfe>
    1afc:	83 37       	cpi	r24, 0x73	; 115
    1afe:	71 f0       	breq	.+28     	; 0x1b1c <vfprintf+0x112>
    1b00:	83 35       	cpi	r24, 0x53	; 83
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <vfprintf+0xfc>
    1b04:	5b c0       	rjmp	.+182    	; 0x1bbc <vfprintf+0x1b2>
    1b06:	22 c0       	rjmp	.+68     	; 0x1b4c <vfprintf+0x142>
    1b08:	f8 01       	movw	r30, r16
    1b0a:	80 81       	ld	r24, Z
    1b0c:	89 83       	std	Y+1, r24	; 0x01
    1b0e:	0e 5f       	subi	r16, 0xFE	; 254
    1b10:	1f 4f       	sbci	r17, 0xFF	; 255
    1b12:	44 24       	eor	r4, r4
    1b14:	43 94       	inc	r4
    1b16:	51 2c       	mov	r5, r1
    1b18:	54 01       	movw	r10, r8
    1b1a:	15 c0       	rjmp	.+42     	; 0x1b46 <vfprintf+0x13c>
    1b1c:	38 01       	movw	r6, r16
    1b1e:	f2 e0       	ldi	r31, 0x02	; 2
    1b20:	6f 0e       	add	r6, r31
    1b22:	71 1c       	adc	r7, r1
    1b24:	f8 01       	movw	r30, r16
    1b26:	a0 80       	ld	r10, Z
    1b28:	b1 80       	ldd	r11, Z+1	; 0x01
    1b2a:	26 ff       	sbrs	r18, 6
    1b2c:	03 c0       	rjmp	.+6      	; 0x1b34 <vfprintf+0x12a>
    1b2e:	65 2d       	mov	r22, r5
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	02 c0       	rjmp	.+4      	; 0x1b38 <vfprintf+0x12e>
    1b34:	6f ef       	ldi	r22, 0xFF	; 255
    1b36:	7f ef       	ldi	r23, 0xFF	; 255
    1b38:	c5 01       	movw	r24, r10
    1b3a:	2c 87       	std	Y+12, r18	; 0x0c
    1b3c:	0e 94 2c 10 	call	0x2058	; 0x2058 <strnlen>
    1b40:	2c 01       	movw	r4, r24
    1b42:	83 01       	movw	r16, r6
    1b44:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b46:	2f 77       	andi	r18, 0x7F	; 127
    1b48:	22 2e       	mov	r2, r18
    1b4a:	17 c0       	rjmp	.+46     	; 0x1b7a <vfprintf+0x170>
    1b4c:	38 01       	movw	r6, r16
    1b4e:	f2 e0       	ldi	r31, 0x02	; 2
    1b50:	6f 0e       	add	r6, r31
    1b52:	71 1c       	adc	r7, r1
    1b54:	f8 01       	movw	r30, r16
    1b56:	a0 80       	ld	r10, Z
    1b58:	b1 80       	ldd	r11, Z+1	; 0x01
    1b5a:	26 ff       	sbrs	r18, 6
    1b5c:	03 c0       	rjmp	.+6      	; 0x1b64 <vfprintf+0x15a>
    1b5e:	65 2d       	mov	r22, r5
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <vfprintf+0x15e>
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	7f ef       	ldi	r23, 0xFF	; 255
    1b68:	c5 01       	movw	r24, r10
    1b6a:	2c 87       	std	Y+12, r18	; 0x0c
    1b6c:	0e 94 1a 10 	call	0x2034	; 0x2034 <strnlen_P>
    1b70:	2c 01       	movw	r4, r24
    1b72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b74:	20 68       	ori	r18, 0x80	; 128
    1b76:	22 2e       	mov	r2, r18
    1b78:	83 01       	movw	r16, r6
    1b7a:	23 fc       	sbrc	r2, 3
    1b7c:	1b c0       	rjmp	.+54     	; 0x1bb4 <vfprintf+0x1aa>
    1b7e:	83 2d       	mov	r24, r3
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	48 16       	cp	r4, r24
    1b84:	59 06       	cpc	r5, r25
    1b86:	b0 f4       	brcc	.+44     	; 0x1bb4 <vfprintf+0x1aa>
    1b88:	b7 01       	movw	r22, r14
    1b8a:	80 e2       	ldi	r24, 0x20	; 32
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1b92:	3a 94       	dec	r3
    1b94:	f4 cf       	rjmp	.-24     	; 0x1b7e <vfprintf+0x174>
    1b96:	f5 01       	movw	r30, r10
    1b98:	27 fc       	sbrc	r2, 7
    1b9a:	85 91       	lpm	r24, Z+
    1b9c:	27 fe       	sbrs	r2, 7
    1b9e:	81 91       	ld	r24, Z+
    1ba0:	5f 01       	movw	r10, r30
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1baa:	31 10       	cpse	r3, r1
    1bac:	3a 94       	dec	r3
    1bae:	f1 e0       	ldi	r31, 0x01	; 1
    1bb0:	4f 1a       	sub	r4, r31
    1bb2:	51 08       	sbc	r5, r1
    1bb4:	41 14       	cp	r4, r1
    1bb6:	51 04       	cpc	r5, r1
    1bb8:	71 f7       	brne	.-36     	; 0x1b96 <vfprintf+0x18c>
    1bba:	e5 c0       	rjmp	.+458    	; 0x1d86 <vfprintf+0x37c>
    1bbc:	84 36       	cpi	r24, 0x64	; 100
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <vfprintf+0x1ba>
    1bc0:	89 36       	cpi	r24, 0x69	; 105
    1bc2:	39 f5       	brne	.+78     	; 0x1c12 <vfprintf+0x208>
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	27 ff       	sbrs	r18, 7
    1bc8:	07 c0       	rjmp	.+14     	; 0x1bd8 <vfprintf+0x1ce>
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	0c 5f       	subi	r16, 0xFC	; 252
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	08 c0       	rjmp	.+16     	; 0x1be8 <vfprintf+0x1de>
    1bd8:	60 81       	ld	r22, Z
    1bda:	71 81       	ldd	r23, Z+1	; 0x01
    1bdc:	88 27       	eor	r24, r24
    1bde:	77 fd       	sbrc	r23, 7
    1be0:	80 95       	com	r24
    1be2:	98 2f       	mov	r25, r24
    1be4:	0e 5f       	subi	r16, 0xFE	; 254
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	2f 76       	andi	r18, 0x6F	; 111
    1bea:	b2 2e       	mov	r11, r18
    1bec:	97 ff       	sbrs	r25, 7
    1bee:	09 c0       	rjmp	.+18     	; 0x1c02 <vfprintf+0x1f8>
    1bf0:	90 95       	com	r25
    1bf2:	80 95       	com	r24
    1bf4:	70 95       	com	r23
    1bf6:	61 95       	neg	r22
    1bf8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfa:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfe:	20 68       	ori	r18, 0x80	; 128
    1c00:	b2 2e       	mov	r11, r18
    1c02:	2a e0       	ldi	r18, 0x0A	; 10
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	a4 01       	movw	r20, r8
    1c08:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__ultoa_invert>
    1c0c:	a8 2e       	mov	r10, r24
    1c0e:	a8 18       	sub	r10, r8
    1c10:	44 c0       	rjmp	.+136    	; 0x1c9a <vfprintf+0x290>
    1c12:	85 37       	cpi	r24, 0x75	; 117
    1c14:	29 f4       	brne	.+10     	; 0x1c20 <vfprintf+0x216>
    1c16:	2f 7e       	andi	r18, 0xEF	; 239
    1c18:	b2 2e       	mov	r11, r18
    1c1a:	2a e0       	ldi	r18, 0x0A	; 10
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	25 c0       	rjmp	.+74     	; 0x1c6a <vfprintf+0x260>
    1c20:	f2 2f       	mov	r31, r18
    1c22:	f9 7f       	andi	r31, 0xF9	; 249
    1c24:	bf 2e       	mov	r11, r31
    1c26:	8f 36       	cpi	r24, 0x6F	; 111
    1c28:	c1 f0       	breq	.+48     	; 0x1c5a <vfprintf+0x250>
    1c2a:	18 f4       	brcc	.+6      	; 0x1c32 <vfprintf+0x228>
    1c2c:	88 35       	cpi	r24, 0x58	; 88
    1c2e:	79 f0       	breq	.+30     	; 0x1c4e <vfprintf+0x244>
    1c30:	b4 c0       	rjmp	.+360    	; 0x1d9a <vfprintf+0x390>
    1c32:	80 37       	cpi	r24, 0x70	; 112
    1c34:	19 f0       	breq	.+6      	; 0x1c3c <vfprintf+0x232>
    1c36:	88 37       	cpi	r24, 0x78	; 120
    1c38:	21 f0       	breq	.+8      	; 0x1c42 <vfprintf+0x238>
    1c3a:	af c0       	rjmp	.+350    	; 0x1d9a <vfprintf+0x390>
    1c3c:	2f 2f       	mov	r18, r31
    1c3e:	20 61       	ori	r18, 0x10	; 16
    1c40:	b2 2e       	mov	r11, r18
    1c42:	b4 fe       	sbrs	r11, 4
    1c44:	0d c0       	rjmp	.+26     	; 0x1c60 <vfprintf+0x256>
    1c46:	8b 2d       	mov	r24, r11
    1c48:	84 60       	ori	r24, 0x04	; 4
    1c4a:	b8 2e       	mov	r11, r24
    1c4c:	09 c0       	rjmp	.+18     	; 0x1c60 <vfprintf+0x256>
    1c4e:	24 ff       	sbrs	r18, 4
    1c50:	0a c0       	rjmp	.+20     	; 0x1c66 <vfprintf+0x25c>
    1c52:	9f 2f       	mov	r25, r31
    1c54:	96 60       	ori	r25, 0x06	; 6
    1c56:	b9 2e       	mov	r11, r25
    1c58:	06 c0       	rjmp	.+12     	; 0x1c66 <vfprintf+0x25c>
    1c5a:	28 e0       	ldi	r18, 0x08	; 8
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	05 c0       	rjmp	.+10     	; 0x1c6a <vfprintf+0x260>
    1c60:	20 e1       	ldi	r18, 0x10	; 16
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <vfprintf+0x260>
    1c66:	20 e1       	ldi	r18, 0x10	; 16
    1c68:	32 e0       	ldi	r19, 0x02	; 2
    1c6a:	f8 01       	movw	r30, r16
    1c6c:	b7 fe       	sbrs	r11, 7
    1c6e:	07 c0       	rjmp	.+14     	; 0x1c7e <vfprintf+0x274>
    1c70:	60 81       	ld	r22, Z
    1c72:	71 81       	ldd	r23, Z+1	; 0x01
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	0c 5f       	subi	r16, 0xFC	; 252
    1c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7c:	06 c0       	rjmp	.+12     	; 0x1c8a <vfprintf+0x280>
    1c7e:	60 81       	ld	r22, Z
    1c80:	71 81       	ldd	r23, Z+1	; 0x01
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	0e 5f       	subi	r16, 0xFE	; 254
    1c88:	1f 4f       	sbci	r17, 0xFF	; 255
    1c8a:	a4 01       	movw	r20, r8
    1c8c:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__ultoa_invert>
    1c90:	a8 2e       	mov	r10, r24
    1c92:	a8 18       	sub	r10, r8
    1c94:	fb 2d       	mov	r31, r11
    1c96:	ff 77       	andi	r31, 0x7F	; 127
    1c98:	bf 2e       	mov	r11, r31
    1c9a:	b6 fe       	sbrs	r11, 6
    1c9c:	0b c0       	rjmp	.+22     	; 0x1cb4 <vfprintf+0x2aa>
    1c9e:	2b 2d       	mov	r18, r11
    1ca0:	2e 7f       	andi	r18, 0xFE	; 254
    1ca2:	a5 14       	cp	r10, r5
    1ca4:	50 f4       	brcc	.+20     	; 0x1cba <vfprintf+0x2b0>
    1ca6:	b4 fe       	sbrs	r11, 4
    1ca8:	0a c0       	rjmp	.+20     	; 0x1cbe <vfprintf+0x2b4>
    1caa:	b2 fc       	sbrc	r11, 2
    1cac:	08 c0       	rjmp	.+16     	; 0x1cbe <vfprintf+0x2b4>
    1cae:	2b 2d       	mov	r18, r11
    1cb0:	2e 7e       	andi	r18, 0xEE	; 238
    1cb2:	05 c0       	rjmp	.+10     	; 0x1cbe <vfprintf+0x2b4>
    1cb4:	7a 2c       	mov	r7, r10
    1cb6:	2b 2d       	mov	r18, r11
    1cb8:	03 c0       	rjmp	.+6      	; 0x1cc0 <vfprintf+0x2b6>
    1cba:	7a 2c       	mov	r7, r10
    1cbc:	01 c0       	rjmp	.+2      	; 0x1cc0 <vfprintf+0x2b6>
    1cbe:	75 2c       	mov	r7, r5
    1cc0:	24 ff       	sbrs	r18, 4
    1cc2:	0d c0       	rjmp	.+26     	; 0x1cde <vfprintf+0x2d4>
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ea 0d       	add	r30, r10
    1cc8:	f1 1d       	adc	r31, r1
    1cca:	80 81       	ld	r24, Z
    1ccc:	80 33       	cpi	r24, 0x30	; 48
    1cce:	11 f4       	brne	.+4      	; 0x1cd4 <vfprintf+0x2ca>
    1cd0:	29 7e       	andi	r18, 0xE9	; 233
    1cd2:	09 c0       	rjmp	.+18     	; 0x1ce6 <vfprintf+0x2dc>
    1cd4:	22 ff       	sbrs	r18, 2
    1cd6:	06 c0       	rjmp	.+12     	; 0x1ce4 <vfprintf+0x2da>
    1cd8:	73 94       	inc	r7
    1cda:	73 94       	inc	r7
    1cdc:	04 c0       	rjmp	.+8      	; 0x1ce6 <vfprintf+0x2dc>
    1cde:	82 2f       	mov	r24, r18
    1ce0:	86 78       	andi	r24, 0x86	; 134
    1ce2:	09 f0       	breq	.+2      	; 0x1ce6 <vfprintf+0x2dc>
    1ce4:	73 94       	inc	r7
    1ce6:	23 fd       	sbrc	r18, 3
    1ce8:	13 c0       	rjmp	.+38     	; 0x1d10 <vfprintf+0x306>
    1cea:	20 ff       	sbrs	r18, 0
    1cec:	06 c0       	rjmp	.+12     	; 0x1cfa <vfprintf+0x2f0>
    1cee:	5a 2c       	mov	r5, r10
    1cf0:	73 14       	cp	r7, r3
    1cf2:	18 f4       	brcc	.+6      	; 0x1cfa <vfprintf+0x2f0>
    1cf4:	53 0c       	add	r5, r3
    1cf6:	57 18       	sub	r5, r7
    1cf8:	73 2c       	mov	r7, r3
    1cfa:	73 14       	cp	r7, r3
    1cfc:	68 f4       	brcc	.+26     	; 0x1d18 <vfprintf+0x30e>
    1cfe:	b7 01       	movw	r22, r14
    1d00:	80 e2       	ldi	r24, 0x20	; 32
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	2c 87       	std	Y+12, r18	; 0x0c
    1d06:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1d0a:	73 94       	inc	r7
    1d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d0e:	f5 cf       	rjmp	.-22     	; 0x1cfa <vfprintf+0x2f0>
    1d10:	73 14       	cp	r7, r3
    1d12:	10 f4       	brcc	.+4      	; 0x1d18 <vfprintf+0x30e>
    1d14:	37 18       	sub	r3, r7
    1d16:	01 c0       	rjmp	.+2      	; 0x1d1a <vfprintf+0x310>
    1d18:	31 2c       	mov	r3, r1
    1d1a:	24 ff       	sbrs	r18, 4
    1d1c:	12 c0       	rjmp	.+36     	; 0x1d42 <vfprintf+0x338>
    1d1e:	b7 01       	movw	r22, r14
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	2c 87       	std	Y+12, r18	; 0x0c
    1d26:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d2c:	22 ff       	sbrs	r18, 2
    1d2e:	17 c0       	rjmp	.+46     	; 0x1d5e <vfprintf+0x354>
    1d30:	21 ff       	sbrs	r18, 1
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <vfprintf+0x330>
    1d34:	88 e5       	ldi	r24, 0x58	; 88
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <vfprintf+0x334>
    1d3a:	88 e7       	ldi	r24, 0x78	; 120
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	b7 01       	movw	r22, r14
    1d40:	0c c0       	rjmp	.+24     	; 0x1d5a <vfprintf+0x350>
    1d42:	82 2f       	mov	r24, r18
    1d44:	86 78       	andi	r24, 0x86	; 134
    1d46:	59 f0       	breq	.+22     	; 0x1d5e <vfprintf+0x354>
    1d48:	21 fd       	sbrc	r18, 1
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <vfprintf+0x346>
    1d4c:	80 e2       	ldi	r24, 0x20	; 32
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <vfprintf+0x348>
    1d50:	8b e2       	ldi	r24, 0x2B	; 43
    1d52:	27 fd       	sbrc	r18, 7
    1d54:	8d e2       	ldi	r24, 0x2D	; 45
    1d56:	b7 01       	movw	r22, r14
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1d5e:	a5 14       	cp	r10, r5
    1d60:	38 f4       	brcc	.+14     	; 0x1d70 <vfprintf+0x366>
    1d62:	b7 01       	movw	r22, r14
    1d64:	80 e3       	ldi	r24, 0x30	; 48
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1d6c:	5a 94       	dec	r5
    1d6e:	f7 cf       	rjmp	.-18     	; 0x1d5e <vfprintf+0x354>
    1d70:	aa 94       	dec	r10
    1d72:	f4 01       	movw	r30, r8
    1d74:	ea 0d       	add	r30, r10
    1d76:	f1 1d       	adc	r31, r1
    1d78:	80 81       	ld	r24, Z
    1d7a:	b7 01       	movw	r22, r14
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1d82:	a1 10       	cpse	r10, r1
    1d84:	f5 cf       	rjmp	.-22     	; 0x1d70 <vfprintf+0x366>
    1d86:	33 20       	and	r3, r3
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <vfprintf+0x382>
    1d8a:	51 ce       	rjmp	.-862    	; 0x1a2e <vfprintf+0x24>
    1d8c:	b7 01       	movw	r22, r14
    1d8e:	80 e2       	ldi	r24, 0x20	; 32
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	0e 94 37 10 	call	0x206e	; 0x206e <fputc>
    1d96:	3a 94       	dec	r3
    1d98:	f6 cf       	rjmp	.-20     	; 0x1d86 <vfprintf+0x37c>
    1d9a:	f7 01       	movw	r30, r14
    1d9c:	86 81       	ldd	r24, Z+6	; 0x06
    1d9e:	97 81       	ldd	r25, Z+7	; 0x07
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <vfprintf+0x39c>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	9f ef       	ldi	r25, 0xFF	; 255
    1da6:	2c 96       	adiw	r28, 0x0c	; 12
    1da8:	e2 e1       	ldi	r30, 0x12	; 18
    1daa:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__>

00001dae <calloc>:
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	86 9f       	mul	r24, r22
    1db8:	80 01       	movw	r16, r0
    1dba:	87 9f       	mul	r24, r23
    1dbc:	10 0d       	add	r17, r0
    1dbe:	96 9f       	mul	r25, r22
    1dc0:	10 0d       	add	r17, r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	c8 01       	movw	r24, r16
    1dc6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <malloc>
    1dca:	ec 01       	movw	r28, r24
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	29 f0       	breq	.+10     	; 0x1dda <calloc+0x2c>
    1dd0:	a8 01       	movw	r20, r16
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	0e 94 25 10 	call	0x204a	; 0x204a <memset>
    1dda:	ce 01       	movw	r24, r28
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	08 95       	ret

00001de6 <malloc>:
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	82 30       	cpi	r24, 0x02	; 2
    1dec:	91 05       	cpc	r25, r1
    1dee:	10 f4       	brcc	.+4      	; 0x1df4 <malloc+0xe>
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	e0 91 96 01 	lds	r30, 0x0196
    1df8:	f0 91 97 01 	lds	r31, 0x0197
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	a0 e0       	ldi	r26, 0x00	; 0
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	30 97       	sbiw	r30, 0x00	; 0
    1e06:	39 f1       	breq	.+78     	; 0x1e56 <malloc+0x70>
    1e08:	40 81       	ld	r20, Z
    1e0a:	51 81       	ldd	r21, Z+1	; 0x01
    1e0c:	48 17       	cp	r20, r24
    1e0e:	59 07       	cpc	r21, r25
    1e10:	b8 f0       	brcs	.+46     	; 0x1e40 <malloc+0x5a>
    1e12:	48 17       	cp	r20, r24
    1e14:	59 07       	cpc	r21, r25
    1e16:	71 f4       	brne	.+28     	; 0x1e34 <malloc+0x4e>
    1e18:	82 81       	ldd	r24, Z+2	; 0x02
    1e1a:	93 81       	ldd	r25, Z+3	; 0x03
    1e1c:	10 97       	sbiw	r26, 0x00	; 0
    1e1e:	29 f0       	breq	.+10     	; 0x1e2a <malloc+0x44>
    1e20:	13 96       	adiw	r26, 0x03	; 3
    1e22:	9c 93       	st	X, r25
    1e24:	8e 93       	st	-X, r24
    1e26:	12 97       	sbiw	r26, 0x02	; 2
    1e28:	2c c0       	rjmp	.+88     	; 0x1e82 <malloc+0x9c>
    1e2a:	90 93 97 01 	sts	0x0197, r25
    1e2e:	80 93 96 01 	sts	0x0196, r24
    1e32:	27 c0       	rjmp	.+78     	; 0x1e82 <malloc+0x9c>
    1e34:	21 15       	cp	r18, r1
    1e36:	31 05       	cpc	r19, r1
    1e38:	31 f0       	breq	.+12     	; 0x1e46 <malloc+0x60>
    1e3a:	42 17       	cp	r20, r18
    1e3c:	53 07       	cpc	r21, r19
    1e3e:	18 f0       	brcs	.+6      	; 0x1e46 <malloc+0x60>
    1e40:	a9 01       	movw	r20, r18
    1e42:	db 01       	movw	r26, r22
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <malloc+0x62>
    1e46:	ef 01       	movw	r28, r30
    1e48:	9a 01       	movw	r18, r20
    1e4a:	bd 01       	movw	r22, r26
    1e4c:	df 01       	movw	r26, r30
    1e4e:	02 80       	ldd	r0, Z+2	; 0x02
    1e50:	f3 81       	ldd	r31, Z+3	; 0x03
    1e52:	e0 2d       	mov	r30, r0
    1e54:	d7 cf       	rjmp	.-82     	; 0x1e04 <malloc+0x1e>
    1e56:	21 15       	cp	r18, r1
    1e58:	31 05       	cpc	r19, r1
    1e5a:	f9 f0       	breq	.+62     	; 0x1e9a <malloc+0xb4>
    1e5c:	28 1b       	sub	r18, r24
    1e5e:	39 0b       	sbc	r19, r25
    1e60:	24 30       	cpi	r18, 0x04	; 4
    1e62:	31 05       	cpc	r19, r1
    1e64:	80 f4       	brcc	.+32     	; 0x1e86 <malloc+0xa0>
    1e66:	8a 81       	ldd	r24, Y+2	; 0x02
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	61 15       	cp	r22, r1
    1e6c:	71 05       	cpc	r23, r1
    1e6e:	21 f0       	breq	.+8      	; 0x1e78 <malloc+0x92>
    1e70:	fb 01       	movw	r30, r22
    1e72:	93 83       	std	Z+3, r25	; 0x03
    1e74:	82 83       	std	Z+2, r24	; 0x02
    1e76:	04 c0       	rjmp	.+8      	; 0x1e80 <malloc+0x9a>
    1e78:	90 93 97 01 	sts	0x0197, r25
    1e7c:	80 93 96 01 	sts	0x0196, r24
    1e80:	fe 01       	movw	r30, r28
    1e82:	32 96       	adiw	r30, 0x02	; 2
    1e84:	44 c0       	rjmp	.+136    	; 0x1f0e <malloc+0x128>
    1e86:	fe 01       	movw	r30, r28
    1e88:	e2 0f       	add	r30, r18
    1e8a:	f3 1f       	adc	r31, r19
    1e8c:	81 93       	st	Z+, r24
    1e8e:	91 93       	st	Z+, r25
    1e90:	22 50       	subi	r18, 0x02	; 2
    1e92:	31 09       	sbc	r19, r1
    1e94:	39 83       	std	Y+1, r19	; 0x01
    1e96:	28 83       	st	Y, r18
    1e98:	3a c0       	rjmp	.+116    	; 0x1f0e <malloc+0x128>
    1e9a:	20 91 94 01 	lds	r18, 0x0194
    1e9e:	30 91 95 01 	lds	r19, 0x0195
    1ea2:	23 2b       	or	r18, r19
    1ea4:	41 f4       	brne	.+16     	; 0x1eb6 <malloc+0xd0>
    1ea6:	20 91 02 01 	lds	r18, 0x0102
    1eaa:	30 91 03 01 	lds	r19, 0x0103
    1eae:	30 93 95 01 	sts	0x0195, r19
    1eb2:	20 93 94 01 	sts	0x0194, r18
    1eb6:	20 91 00 01 	lds	r18, 0x0100
    1eba:	30 91 01 01 	lds	r19, 0x0101
    1ebe:	21 15       	cp	r18, r1
    1ec0:	31 05       	cpc	r19, r1
    1ec2:	41 f4       	brne	.+16     	; 0x1ed4 <malloc+0xee>
    1ec4:	2d b7       	in	r18, 0x3d	; 61
    1ec6:	3e b7       	in	r19, 0x3e	; 62
    1ec8:	40 91 04 01 	lds	r20, 0x0104
    1ecc:	50 91 05 01 	lds	r21, 0x0105
    1ed0:	24 1b       	sub	r18, r20
    1ed2:	35 0b       	sbc	r19, r21
    1ed4:	e0 91 94 01 	lds	r30, 0x0194
    1ed8:	f0 91 95 01 	lds	r31, 0x0195
    1edc:	e2 17       	cp	r30, r18
    1ede:	f3 07       	cpc	r31, r19
    1ee0:	a0 f4       	brcc	.+40     	; 0x1f0a <malloc+0x124>
    1ee2:	2e 1b       	sub	r18, r30
    1ee4:	3f 0b       	sbc	r19, r31
    1ee6:	28 17       	cp	r18, r24
    1ee8:	39 07       	cpc	r19, r25
    1eea:	78 f0       	brcs	.+30     	; 0x1f0a <malloc+0x124>
    1eec:	ac 01       	movw	r20, r24
    1eee:	4e 5f       	subi	r20, 0xFE	; 254
    1ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef2:	24 17       	cp	r18, r20
    1ef4:	35 07       	cpc	r19, r21
    1ef6:	48 f0       	brcs	.+18     	; 0x1f0a <malloc+0x124>
    1ef8:	4e 0f       	add	r20, r30
    1efa:	5f 1f       	adc	r21, r31
    1efc:	50 93 95 01 	sts	0x0195, r21
    1f00:	40 93 94 01 	sts	0x0194, r20
    1f04:	81 93       	st	Z+, r24
    1f06:	91 93       	st	Z+, r25
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <malloc+0x128>
    1f0a:	e0 e0       	ldi	r30, 0x00	; 0
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	cf 01       	movw	r24, r30
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <free>:
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <free+0xa>
    1f1e:	87 c0       	rjmp	.+270    	; 0x202e <free+0x118>
    1f20:	fc 01       	movw	r30, r24
    1f22:	32 97       	sbiw	r30, 0x02	; 2
    1f24:	13 82       	std	Z+3, r1	; 0x03
    1f26:	12 82       	std	Z+2, r1	; 0x02
    1f28:	c0 91 96 01 	lds	r28, 0x0196
    1f2c:	d0 91 97 01 	lds	r29, 0x0197
    1f30:	20 97       	sbiw	r28, 0x00	; 0
    1f32:	81 f4       	brne	.+32     	; 0x1f54 <free+0x3e>
    1f34:	20 81       	ld	r18, Z
    1f36:	31 81       	ldd	r19, Z+1	; 0x01
    1f38:	28 0f       	add	r18, r24
    1f3a:	39 1f       	adc	r19, r25
    1f3c:	80 91 94 01 	lds	r24, 0x0194
    1f40:	90 91 95 01 	lds	r25, 0x0195
    1f44:	82 17       	cp	r24, r18
    1f46:	93 07       	cpc	r25, r19
    1f48:	79 f5       	brne	.+94     	; 0x1fa8 <free+0x92>
    1f4a:	f0 93 95 01 	sts	0x0195, r31
    1f4e:	e0 93 94 01 	sts	0x0194, r30
    1f52:	6d c0       	rjmp	.+218    	; 0x202e <free+0x118>
    1f54:	de 01       	movw	r26, r28
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	ae 17       	cp	r26, r30
    1f5c:	bf 07       	cpc	r27, r31
    1f5e:	50 f4       	brcc	.+20     	; 0x1f74 <free+0x5e>
    1f60:	12 96       	adiw	r26, 0x02	; 2
    1f62:	4d 91       	ld	r20, X+
    1f64:	5c 91       	ld	r21, X
    1f66:	13 97       	sbiw	r26, 0x03	; 3
    1f68:	9d 01       	movw	r18, r26
    1f6a:	41 15       	cp	r20, r1
    1f6c:	51 05       	cpc	r21, r1
    1f6e:	09 f1       	breq	.+66     	; 0x1fb2 <free+0x9c>
    1f70:	da 01       	movw	r26, r20
    1f72:	f3 cf       	rjmp	.-26     	; 0x1f5a <free+0x44>
    1f74:	b3 83       	std	Z+3, r27	; 0x03
    1f76:	a2 83       	std	Z+2, r26	; 0x02
    1f78:	40 81       	ld	r20, Z
    1f7a:	51 81       	ldd	r21, Z+1	; 0x01
    1f7c:	84 0f       	add	r24, r20
    1f7e:	95 1f       	adc	r25, r21
    1f80:	8a 17       	cp	r24, r26
    1f82:	9b 07       	cpc	r25, r27
    1f84:	71 f4       	brne	.+28     	; 0x1fa2 <free+0x8c>
    1f86:	8d 91       	ld	r24, X+
    1f88:	9c 91       	ld	r25, X
    1f8a:	11 97       	sbiw	r26, 0x01	; 1
    1f8c:	84 0f       	add	r24, r20
    1f8e:	95 1f       	adc	r25, r21
    1f90:	02 96       	adiw	r24, 0x02	; 2
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	12 96       	adiw	r26, 0x02	; 2
    1f98:	8d 91       	ld	r24, X+
    1f9a:	9c 91       	ld	r25, X
    1f9c:	13 97       	sbiw	r26, 0x03	; 3
    1f9e:	93 83       	std	Z+3, r25	; 0x03
    1fa0:	82 83       	std	Z+2, r24	; 0x02
    1fa2:	21 15       	cp	r18, r1
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	29 f4       	brne	.+10     	; 0x1fb2 <free+0x9c>
    1fa8:	f0 93 97 01 	sts	0x0197, r31
    1fac:	e0 93 96 01 	sts	0x0196, r30
    1fb0:	3e c0       	rjmp	.+124    	; 0x202e <free+0x118>
    1fb2:	d9 01       	movw	r26, r18
    1fb4:	13 96       	adiw	r26, 0x03	; 3
    1fb6:	fc 93       	st	X, r31
    1fb8:	ee 93       	st	-X, r30
    1fba:	12 97       	sbiw	r26, 0x02	; 2
    1fbc:	4d 91       	ld	r20, X+
    1fbe:	5d 91       	ld	r21, X+
    1fc0:	a4 0f       	add	r26, r20
    1fc2:	b5 1f       	adc	r27, r21
    1fc4:	ea 17       	cp	r30, r26
    1fc6:	fb 07       	cpc	r31, r27
    1fc8:	79 f4       	brne	.+30     	; 0x1fe8 <free+0xd2>
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	84 0f       	add	r24, r20
    1fd0:	95 1f       	adc	r25, r21
    1fd2:	02 96       	adiw	r24, 0x02	; 2
    1fd4:	d9 01       	movw	r26, r18
    1fd6:	11 96       	adiw	r26, 0x01	; 1
    1fd8:	9c 93       	st	X, r25
    1fda:	8e 93       	st	-X, r24
    1fdc:	82 81       	ldd	r24, Z+2	; 0x02
    1fde:	93 81       	ldd	r25, Z+3	; 0x03
    1fe0:	13 96       	adiw	r26, 0x03	; 3
    1fe2:	9c 93       	st	X, r25
    1fe4:	8e 93       	st	-X, r24
    1fe6:	12 97       	sbiw	r26, 0x02	; 2
    1fe8:	e0 e0       	ldi	r30, 0x00	; 0
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <free+0xe4>
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	ec 01       	movw	r28, r24
    1ff8:	f9 cf       	rjmp	.-14     	; 0x1fec <free+0xd6>
    1ffa:	ce 01       	movw	r24, r28
    1ffc:	02 96       	adiw	r24, 0x02	; 2
    1ffe:	28 81       	ld	r18, Y
    2000:	39 81       	ldd	r19, Y+1	; 0x01
    2002:	82 0f       	add	r24, r18
    2004:	93 1f       	adc	r25, r19
    2006:	20 91 94 01 	lds	r18, 0x0194
    200a:	30 91 95 01 	lds	r19, 0x0195
    200e:	28 17       	cp	r18, r24
    2010:	39 07       	cpc	r19, r25
    2012:	69 f4       	brne	.+26     	; 0x202e <free+0x118>
    2014:	30 97       	sbiw	r30, 0x00	; 0
    2016:	29 f4       	brne	.+10     	; 0x2022 <free+0x10c>
    2018:	10 92 97 01 	sts	0x0197, r1
    201c:	10 92 96 01 	sts	0x0196, r1
    2020:	02 c0       	rjmp	.+4      	; 0x2026 <free+0x110>
    2022:	13 82       	std	Z+3, r1	; 0x03
    2024:	12 82       	std	Z+2, r1	; 0x02
    2026:	d0 93 95 01 	sts	0x0195, r29
    202a:	c0 93 94 01 	sts	0x0194, r28
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	08 95       	ret

00002034 <strnlen_P>:
    2034:	fc 01       	movw	r30, r24
    2036:	05 90       	lpm	r0, Z+
    2038:	61 50       	subi	r22, 0x01	; 1
    203a:	70 40       	sbci	r23, 0x00	; 0
    203c:	01 10       	cpse	r0, r1
    203e:	d8 f7       	brcc	.-10     	; 0x2036 <strnlen_P+0x2>
    2040:	80 95       	com	r24
    2042:	90 95       	com	r25
    2044:	8e 0f       	add	r24, r30
    2046:	9f 1f       	adc	r25, r31
    2048:	08 95       	ret

0000204a <memset>:
    204a:	dc 01       	movw	r26, r24
    204c:	01 c0       	rjmp	.+2      	; 0x2050 <memset+0x6>
    204e:	6d 93       	st	X+, r22
    2050:	41 50       	subi	r20, 0x01	; 1
    2052:	50 40       	sbci	r21, 0x00	; 0
    2054:	e0 f7       	brcc	.-8      	; 0x204e <memset+0x4>
    2056:	08 95       	ret

00002058 <strnlen>:
    2058:	fc 01       	movw	r30, r24
    205a:	61 50       	subi	r22, 0x01	; 1
    205c:	70 40       	sbci	r23, 0x00	; 0
    205e:	01 90       	ld	r0, Z+
    2060:	01 10       	cpse	r0, r1
    2062:	d8 f7       	brcc	.-10     	; 0x205a <strnlen+0x2>
    2064:	80 95       	com	r24
    2066:	90 95       	com	r25
    2068:	8e 0f       	add	r24, r30
    206a:	9f 1f       	adc	r25, r31
    206c:	08 95       	ret

0000206e <fputc>:
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	18 2f       	mov	r17, r24
    2078:	09 2f       	mov	r16, r25
    207a:	eb 01       	movw	r28, r22
    207c:	8b 81       	ldd	r24, Y+3	; 0x03
    207e:	81 fd       	sbrc	r24, 1
    2080:	03 c0       	rjmp	.+6      	; 0x2088 <fputc+0x1a>
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	9f ef       	ldi	r25, 0xFF	; 255
    2086:	20 c0       	rjmp	.+64     	; 0x20c8 <fputc+0x5a>
    2088:	82 ff       	sbrs	r24, 2
    208a:	10 c0       	rjmp	.+32     	; 0x20ac <fputc+0x3e>
    208c:	4e 81       	ldd	r20, Y+6	; 0x06
    208e:	5f 81       	ldd	r21, Y+7	; 0x07
    2090:	2c 81       	ldd	r18, Y+4	; 0x04
    2092:	3d 81       	ldd	r19, Y+5	; 0x05
    2094:	42 17       	cp	r20, r18
    2096:	53 07       	cpc	r21, r19
    2098:	7c f4       	brge	.+30     	; 0x20b8 <fputc+0x4a>
    209a:	e8 81       	ld	r30, Y
    209c:	f9 81       	ldd	r31, Y+1	; 0x01
    209e:	9f 01       	movw	r18, r30
    20a0:	2f 5f       	subi	r18, 0xFF	; 255
    20a2:	3f 4f       	sbci	r19, 0xFF	; 255
    20a4:	39 83       	std	Y+1, r19	; 0x01
    20a6:	28 83       	st	Y, r18
    20a8:	10 83       	st	Z, r17
    20aa:	06 c0       	rjmp	.+12     	; 0x20b8 <fputc+0x4a>
    20ac:	e8 85       	ldd	r30, Y+8	; 0x08
    20ae:	f9 85       	ldd	r31, Y+9	; 0x09
    20b0:	81 2f       	mov	r24, r17
    20b2:	09 95       	icall
    20b4:	89 2b       	or	r24, r25
    20b6:	29 f7       	brne	.-54     	; 0x2082 <fputc+0x14>
    20b8:	2e 81       	ldd	r18, Y+6	; 0x06
    20ba:	3f 81       	ldd	r19, Y+7	; 0x07
    20bc:	2f 5f       	subi	r18, 0xFF	; 255
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	3f 83       	std	Y+7, r19	; 0x07
    20c2:	2e 83       	std	Y+6, r18	; 0x06
    20c4:	81 2f       	mov	r24, r17
    20c6:	90 2f       	mov	r25, r16
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	1f 91       	pop	r17
    20ce:	0f 91       	pop	r16
    20d0:	08 95       	ret

000020d2 <__ultoa_invert>:
    20d2:	fa 01       	movw	r30, r20
    20d4:	aa 27       	eor	r26, r26
    20d6:	28 30       	cpi	r18, 0x08	; 8
    20d8:	51 f1       	breq	.+84     	; 0x212e <__ultoa_invert+0x5c>
    20da:	20 31       	cpi	r18, 0x10	; 16
    20dc:	81 f1       	breq	.+96     	; 0x213e <__ultoa_invert+0x6c>
    20de:	e8 94       	clt
    20e0:	6f 93       	push	r22
    20e2:	6e 7f       	andi	r22, 0xFE	; 254
    20e4:	6e 5f       	subi	r22, 0xFE	; 254
    20e6:	7f 4f       	sbci	r23, 0xFF	; 255
    20e8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ea:	9f 4f       	sbci	r25, 0xFF	; 255
    20ec:	af 4f       	sbci	r26, 0xFF	; 255
    20ee:	b1 e0       	ldi	r27, 0x01	; 1
    20f0:	3e d0       	rcall	.+124    	; 0x216e <__ultoa_invert+0x9c>
    20f2:	b4 e0       	ldi	r27, 0x04	; 4
    20f4:	3c d0       	rcall	.+120    	; 0x216e <__ultoa_invert+0x9c>
    20f6:	67 0f       	add	r22, r23
    20f8:	78 1f       	adc	r23, r24
    20fa:	89 1f       	adc	r24, r25
    20fc:	9a 1f       	adc	r25, r26
    20fe:	a1 1d       	adc	r26, r1
    2100:	68 0f       	add	r22, r24
    2102:	79 1f       	adc	r23, r25
    2104:	8a 1f       	adc	r24, r26
    2106:	91 1d       	adc	r25, r1
    2108:	a1 1d       	adc	r26, r1
    210a:	6a 0f       	add	r22, r26
    210c:	71 1d       	adc	r23, r1
    210e:	81 1d       	adc	r24, r1
    2110:	91 1d       	adc	r25, r1
    2112:	a1 1d       	adc	r26, r1
    2114:	20 d0       	rcall	.+64     	; 0x2156 <__ultoa_invert+0x84>
    2116:	09 f4       	brne	.+2      	; 0x211a <__ultoa_invert+0x48>
    2118:	68 94       	set
    211a:	3f 91       	pop	r19
    211c:	2a e0       	ldi	r18, 0x0A	; 10
    211e:	26 9f       	mul	r18, r22
    2120:	11 24       	eor	r1, r1
    2122:	30 19       	sub	r19, r0
    2124:	30 5d       	subi	r19, 0xD0	; 208
    2126:	31 93       	st	Z+, r19
    2128:	de f6       	brtc	.-74     	; 0x20e0 <__ultoa_invert+0xe>
    212a:	cf 01       	movw	r24, r30
    212c:	08 95       	ret
    212e:	46 2f       	mov	r20, r22
    2130:	47 70       	andi	r20, 0x07	; 7
    2132:	40 5d       	subi	r20, 0xD0	; 208
    2134:	41 93       	st	Z+, r20
    2136:	b3 e0       	ldi	r27, 0x03	; 3
    2138:	0f d0       	rcall	.+30     	; 0x2158 <__ultoa_invert+0x86>
    213a:	c9 f7       	brne	.-14     	; 0x212e <__ultoa_invert+0x5c>
    213c:	f6 cf       	rjmp	.-20     	; 0x212a <__ultoa_invert+0x58>
    213e:	46 2f       	mov	r20, r22
    2140:	4f 70       	andi	r20, 0x0F	; 15
    2142:	40 5d       	subi	r20, 0xD0	; 208
    2144:	4a 33       	cpi	r20, 0x3A	; 58
    2146:	18 f0       	brcs	.+6      	; 0x214e <__ultoa_invert+0x7c>
    2148:	49 5d       	subi	r20, 0xD9	; 217
    214a:	31 fd       	sbrc	r19, 1
    214c:	40 52       	subi	r20, 0x20	; 32
    214e:	41 93       	st	Z+, r20
    2150:	02 d0       	rcall	.+4      	; 0x2156 <__ultoa_invert+0x84>
    2152:	a9 f7       	brne	.-22     	; 0x213e <__ultoa_invert+0x6c>
    2154:	ea cf       	rjmp	.-44     	; 0x212a <__ultoa_invert+0x58>
    2156:	b4 e0       	ldi	r27, 0x04	; 4
    2158:	a6 95       	lsr	r26
    215a:	97 95       	ror	r25
    215c:	87 95       	ror	r24
    215e:	77 95       	ror	r23
    2160:	67 95       	ror	r22
    2162:	ba 95       	dec	r27
    2164:	c9 f7       	brne	.-14     	; 0x2158 <__ultoa_invert+0x86>
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	61 05       	cpc	r22, r1
    216a:	71 05       	cpc	r23, r1
    216c:	08 95       	ret
    216e:	9b 01       	movw	r18, r22
    2170:	ac 01       	movw	r20, r24
    2172:	0a 2e       	mov	r0, r26
    2174:	06 94       	lsr	r0
    2176:	57 95       	ror	r21
    2178:	47 95       	ror	r20
    217a:	37 95       	ror	r19
    217c:	27 95       	ror	r18
    217e:	ba 95       	dec	r27
    2180:	c9 f7       	brne	.-14     	; 0x2174 <__ultoa_invert+0xa2>
    2182:	62 0f       	add	r22, r18
    2184:	73 1f       	adc	r23, r19
    2186:	84 1f       	adc	r24, r20
    2188:	95 1f       	adc	r25, r21
    218a:	a0 1d       	adc	r26, r0
    218c:	08 95       	ret

0000218e <__prologue_saves__>:
    218e:	2f 92       	push	r2
    2190:	3f 92       	push	r3
    2192:	4f 92       	push	r4
    2194:	5f 92       	push	r5
    2196:	6f 92       	push	r6
    2198:	7f 92       	push	r7
    219a:	8f 92       	push	r8
    219c:	9f 92       	push	r9
    219e:	af 92       	push	r10
    21a0:	bf 92       	push	r11
    21a2:	cf 92       	push	r12
    21a4:	df 92       	push	r13
    21a6:	ef 92       	push	r14
    21a8:	ff 92       	push	r15
    21aa:	0f 93       	push	r16
    21ac:	1f 93       	push	r17
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	ca 1b       	sub	r28, r26
    21b8:	db 0b       	sbc	r29, r27
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	09 94       	ijmp

000021c6 <__epilogue_restores__>:
    21c6:	2a 88       	ldd	r2, Y+18	; 0x12
    21c8:	39 88       	ldd	r3, Y+17	; 0x11
    21ca:	48 88       	ldd	r4, Y+16	; 0x10
    21cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    21ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    21d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21d8:	b9 84       	ldd	r11, Y+9	; 0x09
    21da:	c8 84       	ldd	r12, Y+8	; 0x08
    21dc:	df 80       	ldd	r13, Y+7	; 0x07
    21de:	ee 80       	ldd	r14, Y+6	; 0x06
    21e0:	fd 80       	ldd	r15, Y+5	; 0x05
    21e2:	0c 81       	ldd	r16, Y+4	; 0x04
    21e4:	1b 81       	ldd	r17, Y+3	; 0x03
    21e6:	aa 81       	ldd	r26, Y+2	; 0x02
    21e8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ea:	ce 0f       	add	r28, r30
    21ec:	d1 1d       	adc	r29, r1
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	ed 01       	movw	r28, r26
    21fa:	08 95       	ret

000021fc <__do_global_dtors>:
    21fc:	12 e0       	ldi	r17, 0x02	; 2
    21fe:	c4 e0       	ldi	r28, 0x04	; 4
    2200:	d2 e0       	ldi	r29, 0x02	; 2
    2202:	04 c0       	rjmp	.+8      	; 0x220c <__do_global_dtors+0x10>
    2204:	fe 01       	movw	r30, r28
    2206:	0e 94 8b 0c 	call	0x1916	; 0x1916 <__tablejump__>
    220a:	22 96       	adiw	r28, 0x02	; 2
    220c:	c6 30       	cpi	r28, 0x06	; 6
    220e:	d1 07       	cpc	r29, r17
    2210:	c9 f7       	brne	.-14     	; 0x2204 <__do_global_dtors+0x8>
    2212:	f8 94       	cli

00002214 <__stop_program>:
    2214:	ff cf       	rjmp	.-2      	; 0x2214 <__stop_program>
